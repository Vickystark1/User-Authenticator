{"ast":null,"code":"import { h } from 'preact';\nimport { UIPlugin } from '@uppy/core';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\nconst packageJson = {\n  \"version\": \"3.1.1\"\n};\n// set default options, must kept in sync with @uppy/react/src/ProgressBar.js\nconst defaultOptions = {\n  target: 'body',\n  fixed: false,\n  hideAfterFinish: true\n};\n/**\n * Progress bar\n *\n */\nexport default class ProgressBar extends UIPlugin {\n  constructor(uppy, opts) {\n    super(uppy, {\n      ...defaultOptions,\n      ...opts\n    });\n    this.id = this.opts.id || 'ProgressBar';\n    this.title = 'Progress Bar';\n    this.type = 'progressindicator';\n    this.render = this.render.bind(this);\n  }\n  render(state) {\n    const progress = state.totalProgress || 0;\n    // before starting and after finish should be hidden if specified in the options\n    const isHidden = (progress === 0 || progress === 100) && this.opts.hideAfterFinish;\n    return h(\"div\", {\n      className: \"uppy uppy-ProgressBar\",\n      style: {\n        position: this.opts.fixed ? 'fixed' : 'initial'\n      },\n      \"aria-hidden\": isHidden\n    }, h(\"div\", {\n      className: \"uppy-ProgressBar-inner\",\n      style: {\n        width: `${progress}%`\n      }\n    }), h(\"div\", {\n      className: \"uppy-ProgressBar-percentage\"\n    }, progress));\n  }\n  install() {\n    const {\n      target\n    } = this.opts;\n    if (target) {\n      this.mount(target, this);\n    }\n  }\n  uninstall() {\n    this.unmount();\n  }\n}\nProgressBar.VERSION = packageJson.version;","map":{"version":3,"names":["h","UIPlugin","packageJson","defaultOptions","target","fixed","hideAfterFinish","ProgressBar","constructor","uppy","opts","id","title","type","render","bind","state","progress","totalProgress","isHidden","className","style","position","width","install","mount","uninstall","unmount","VERSION","version"],"sources":["/home/nainar/Documents/reactProjects/userAuthentiCator/registeration-login/node_modules/@uppy/progress-bar/lib/ProgressBar.js"],"sourcesContent":["import { h } from 'preact';\nimport { UIPlugin } from '@uppy/core';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\nconst packageJson = {\n  \"version\": \"3.1.1\"\n};\n// set default options, must kept in sync with @uppy/react/src/ProgressBar.js\nconst defaultOptions = {\n  target: 'body',\n  fixed: false,\n  hideAfterFinish: true\n};\n/**\n * Progress bar\n *\n */\nexport default class ProgressBar extends UIPlugin {\n  constructor(uppy, opts) {\n    super(uppy, {\n      ...defaultOptions,\n      ...opts\n    });\n    this.id = this.opts.id || 'ProgressBar';\n    this.title = 'Progress Bar';\n    this.type = 'progressindicator';\n    this.render = this.render.bind(this);\n  }\n  render(state) {\n    const progress = state.totalProgress || 0;\n    // before starting and after finish should be hidden if specified in the options\n    const isHidden = (progress === 0 || progress === 100) && this.opts.hideAfterFinish;\n    return h(\"div\", {\n      className: \"uppy uppy-ProgressBar\",\n      style: {\n        position: this.opts.fixed ? 'fixed' : 'initial'\n      },\n      \"aria-hidden\": isHidden\n    }, h(\"div\", {\n      className: \"uppy-ProgressBar-inner\",\n      style: {\n        width: `${progress}%`\n      }\n    }), h(\"div\", {\n      className: \"uppy-ProgressBar-percentage\"\n    }, progress));\n  }\n  install() {\n    const {\n      target\n    } = this.opts;\n    if (target) {\n      this.mount(target, this);\n    }\n  }\n  uninstall() {\n    this.unmount();\n  }\n}\nProgressBar.VERSION = packageJson.version;"],"mappings":"AAAA,SAASA,CAAC,QAAQ,QAAQ;AAC1B,SAASC,QAAQ,QAAQ,YAAY;AACrC;AACA;AACA,MAAMC,WAAW,GAAG;EAClB,SAAS,EAAE;AACb,CAAC;AACD;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE,KAAK;EACZC,eAAe,EAAE;AACnB,CAAC;AACD;AACA;AACA;AACA;AACA,eAAe,MAAMC,WAAW,SAASN,QAAQ,CAAC;EAChDO,WAAWA,CAACC,IAAI,EAAEC,IAAI,EAAE;IACtB,KAAK,CAACD,IAAI,EAAE;MACV,GAAGN,cAAc;MACjB,GAAGO;IACL,CAAC,CAAC;IACF,IAAI,CAACC,EAAE,GAAG,IAAI,CAACD,IAAI,CAACC,EAAE,IAAI,aAAa;IACvC,IAAI,CAACC,KAAK,GAAG,cAAc;IAC3B,IAAI,CAACC,IAAI,GAAG,mBAAmB;IAC/B,IAAI,CAACC,MAAM,GAAG,IAAI,CAACA,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC;EACtC;EACAD,MAAMA,CAACE,KAAK,EAAE;IACZ,MAAMC,QAAQ,GAAGD,KAAK,CAACE,aAAa,IAAI,CAAC;IACzC;IACA,MAAMC,QAAQ,GAAG,CAACF,QAAQ,KAAK,CAAC,IAAIA,QAAQ,KAAK,GAAG,KAAK,IAAI,CAACP,IAAI,CAACJ,eAAe;IAClF,OAAON,CAAC,CAAC,KAAK,EAAE;MACdoB,SAAS,EAAE,uBAAuB;MAClCC,KAAK,EAAE;QACLC,QAAQ,EAAE,IAAI,CAACZ,IAAI,CAACL,KAAK,GAAG,OAAO,GAAG;MACxC,CAAC;MACD,aAAa,EAAEc;IACjB,CAAC,EAAEnB,CAAC,CAAC,KAAK,EAAE;MACVoB,SAAS,EAAE,wBAAwB;MACnCC,KAAK,EAAE;QACLE,KAAK,EAAG,GAAEN,QAAS;MACrB;IACF,CAAC,CAAC,EAAEjB,CAAC,CAAC,KAAK,EAAE;MACXoB,SAAS,EAAE;IACb,CAAC,EAAEH,QAAQ,CAAC,CAAC;EACf;EACAO,OAAOA,CAAA,EAAG;IACR,MAAM;MACJpB;IACF,CAAC,GAAG,IAAI,CAACM,IAAI;IACb,IAAIN,MAAM,EAAE;MACV,IAAI,CAACqB,KAAK,CAACrB,MAAM,EAAE,IAAI,CAAC;IAC1B;EACF;EACAsB,SAASA,CAAA,EAAG;IACV,IAAI,CAACC,OAAO,CAAC,CAAC;EAChB;AACF;AACApB,WAAW,CAACqB,OAAO,GAAG1B,WAAW,CAAC2B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}