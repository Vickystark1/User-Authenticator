{"ast":null,"code":"/* eslint-disable @typescript-eslint/ban-ts-comment */\n/* eslint-disable max-classes-per-file, class-methods-use-this */\nimport prettierBytes from '@transloadit/prettier-bytes';\n// @ts-ignore untyped\nimport match from 'mime-match';\n\n/**\n * The minimal required properties to be present from UppyFile in order to validate it.\n */\n\nconst defaultOptions = {\n  maxFileSize: null,\n  minFileSize: null,\n  maxTotalFileSize: null,\n  maxNumberOfFiles: null,\n  minNumberOfFiles: null,\n  allowedFileTypes: null,\n  requiredMetaFields: []\n};\nclass RestrictionError extends Error {\n  constructor(message, opts) {\n    var _opts$isUserFacing;\n    super(message);\n    this.isRestriction = true;\n    this.isUserFacing = (_opts$isUserFacing = opts == null ? void 0 : opts.isUserFacing) != null ? _opts$isUserFacing : true;\n    if (opts != null && opts.file) {\n      this.file = opts.file; // only some restriction errors are related to a particular file\n    }\n  }\n}\n\nclass Restricter {\n  constructor(getOpts, i18n) {\n    this.i18n = i18n;\n    this.getOpts = () => {\n      var _opts$restrictions;\n      const opts = getOpts();\n      if (((_opts$restrictions = opts.restrictions) == null ? void 0 : _opts$restrictions.allowedFileTypes) != null && !Array.isArray(opts.restrictions.allowedFileTypes)) {\n        throw new TypeError('`restrictions.allowedFileTypes` must be an array');\n      }\n      return opts;\n    };\n  }\n\n  // Because these operations are slow, we cannot run them for every file (if we are adding multiple files)\n  validateAggregateRestrictions(existingFiles, addingFiles) {\n    const {\n      maxTotalFileSize,\n      maxNumberOfFiles\n    } = this.getOpts().restrictions;\n    if (maxNumberOfFiles) {\n      const nonGhostFiles = existingFiles.filter(f => !f.isGhost);\n      if (nonGhostFiles.length + addingFiles.length > maxNumberOfFiles) {\n        throw new RestrictionError(`${this.i18n('youCanOnlyUploadX', {\n          smart_count: maxNumberOfFiles\n        })}`);\n      }\n    }\n    if (maxTotalFileSize) {\n      let totalFilesSize = existingFiles.reduce((total, f) => {\n        var _f$size;\n        return total + ((_f$size = f.size) != null ? _f$size : 0);\n      }, 0);\n      for (const addingFile of addingFiles) {\n        if (addingFile.size != null) {\n          // We can't check maxTotalFileSize if the size is unknown.\n          totalFilesSize += addingFile.size;\n          if (totalFilesSize > maxTotalFileSize) {\n            throw new RestrictionError(this.i18n('exceedsSize', {\n              size: prettierBytes(maxTotalFileSize),\n              file: addingFile.name\n            }));\n          }\n        }\n      }\n    }\n  }\n  validateSingleFile(file) {\n    const {\n      maxFileSize,\n      minFileSize,\n      allowedFileTypes\n    } = this.getOpts().restrictions;\n    if (allowedFileTypes) {\n      const isCorrectFileType = allowedFileTypes.some(type => {\n        // check if this is a mime-type\n        if (type.includes('/')) {\n          if (!file.type) return false;\n          return match(file.type.replace(/;.*?$/, ''), type);\n        }\n\n        // otherwise this is likely an extension\n        if (type[0] === '.' && file.extension) {\n          return file.extension.toLowerCase() === type.slice(1).toLowerCase();\n        }\n        return false;\n      });\n      if (!isCorrectFileType) {\n        const allowedFileTypesString = allowedFileTypes.join(', ');\n        throw new RestrictionError(this.i18n('youCanOnlyUploadFileTypes', {\n          types: allowedFileTypesString\n        }), {\n          file\n        });\n      }\n    }\n\n    // We can't check maxFileSize if the size is unknown.\n    if (maxFileSize && file.size != null && file.size > maxFileSize) {\n      throw new RestrictionError(this.i18n('exceedsSize', {\n        size: prettierBytes(maxFileSize),\n        file: file.name\n      }), {\n        file\n      });\n    }\n\n    // We can't check minFileSize if the size is unknown.\n    if (minFileSize && file.size != null && file.size < minFileSize) {\n      throw new RestrictionError(this.i18n('inferiorSize', {\n        size: prettierBytes(minFileSize)\n      }), {\n        file\n      });\n    }\n  }\n  validate(existingFiles, addingFiles) {\n    addingFiles.forEach(addingFile => {\n      this.validateSingleFile(addingFile);\n    });\n    this.validateAggregateRestrictions(existingFiles, addingFiles);\n  }\n  validateMinNumberOfFiles(files) {\n    const {\n      minNumberOfFiles\n    } = this.getOpts().restrictions;\n    if (minNumberOfFiles && Object.keys(files).length < minNumberOfFiles) {\n      throw new RestrictionError(this.i18n('youHaveToAtLeastSelectX', {\n        smart_count: minNumberOfFiles\n      }));\n    }\n  }\n  getMissingRequiredMetaFields(file) {\n    const error = new RestrictionError(this.i18n('missingRequiredMetaFieldOnFile', {\n      fileName: file.name\n    }));\n    const {\n      requiredMetaFields\n    } = this.getOpts().restrictions;\n    const missingFields = [];\n    for (const field of requiredMetaFields) {\n      if (!Object.hasOwn(file.meta, field) || file.meta[field] === '') {\n        missingFields.push(field);\n      }\n    }\n    return {\n      missingFields,\n      error\n    };\n  }\n}\nexport { Restricter, defaultOptions, RestrictionError };","map":{"version":3,"names":["prettierBytes","match","defaultOptions","maxFileSize","minFileSize","maxTotalFileSize","maxNumberOfFiles","minNumberOfFiles","allowedFileTypes","requiredMetaFields","RestrictionError","Error","constructor","message","opts","_opts$isUserFacing","isRestriction","isUserFacing","file","Restricter","getOpts","i18n","_opts$restrictions","restrictions","Array","isArray","TypeError","validateAggregateRestrictions","existingFiles","addingFiles","nonGhostFiles","filter","f","isGhost","length","smart_count","totalFilesSize","reduce","total","_f$size","size","addingFile","name","validateSingleFile","isCorrectFileType","some","type","includes","replace","extension","toLowerCase","slice","allowedFileTypesString","join","types","validate","forEach","validateMinNumberOfFiles","files","Object","keys","getMissingRequiredMetaFields","error","fileName","missingFields","field","hasOwn","meta","push"],"sources":["/home/nainar/Documents/reactProjects/userAuthentiCator/registeration-login/node_modules/@uppy/core/lib/Restricter.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\n/* eslint-disable max-classes-per-file, class-methods-use-this */\nimport prettierBytes from '@transloadit/prettier-bytes';\n// @ts-ignore untyped\nimport match from 'mime-match';\n\n/**\n * The minimal required properties to be present from UppyFile in order to validate it.\n */\n\nconst defaultOptions = {\n  maxFileSize: null,\n  minFileSize: null,\n  maxTotalFileSize: null,\n  maxNumberOfFiles: null,\n  minNumberOfFiles: null,\n  allowedFileTypes: null,\n  requiredMetaFields: []\n};\nclass RestrictionError extends Error {\n  constructor(message, opts) {\n    var _opts$isUserFacing;\n    super(message);\n    this.isRestriction = true;\n    this.isUserFacing = (_opts$isUserFacing = opts == null ? void 0 : opts.isUserFacing) != null ? _opts$isUserFacing : true;\n    if (opts != null && opts.file) {\n      this.file = opts.file; // only some restriction errors are related to a particular file\n    }\n  }\n}\nclass Restricter {\n  constructor(getOpts, i18n) {\n    this.i18n = i18n;\n    this.getOpts = () => {\n      var _opts$restrictions;\n      const opts = getOpts();\n      if (((_opts$restrictions = opts.restrictions) == null ? void 0 : _opts$restrictions.allowedFileTypes) != null && !Array.isArray(opts.restrictions.allowedFileTypes)) {\n        throw new TypeError('`restrictions.allowedFileTypes` must be an array');\n      }\n      return opts;\n    };\n  }\n\n  // Because these operations are slow, we cannot run them for every file (if we are adding multiple files)\n  validateAggregateRestrictions(existingFiles, addingFiles) {\n    const {\n      maxTotalFileSize,\n      maxNumberOfFiles\n    } = this.getOpts().restrictions;\n    if (maxNumberOfFiles) {\n      const nonGhostFiles = existingFiles.filter(f => !f.isGhost);\n      if (nonGhostFiles.length + addingFiles.length > maxNumberOfFiles) {\n        throw new RestrictionError(`${this.i18n('youCanOnlyUploadX', {\n          smart_count: maxNumberOfFiles\n        })}`);\n      }\n    }\n    if (maxTotalFileSize) {\n      let totalFilesSize = existingFiles.reduce((total, f) => {\n        var _f$size;\n        return total + ((_f$size = f.size) != null ? _f$size : 0);\n      }, 0);\n      for (const addingFile of addingFiles) {\n        if (addingFile.size != null) {\n          // We can't check maxTotalFileSize if the size is unknown.\n          totalFilesSize += addingFile.size;\n          if (totalFilesSize > maxTotalFileSize) {\n            throw new RestrictionError(this.i18n('exceedsSize', {\n              size: prettierBytes(maxTotalFileSize),\n              file: addingFile.name\n            }));\n          }\n        }\n      }\n    }\n  }\n  validateSingleFile(file) {\n    const {\n      maxFileSize,\n      minFileSize,\n      allowedFileTypes\n    } = this.getOpts().restrictions;\n    if (allowedFileTypes) {\n      const isCorrectFileType = allowedFileTypes.some(type => {\n        // check if this is a mime-type\n        if (type.includes('/')) {\n          if (!file.type) return false;\n          return match(file.type.replace(/;.*?$/, ''), type);\n        }\n\n        // otherwise this is likely an extension\n        if (type[0] === '.' && file.extension) {\n          return file.extension.toLowerCase() === type.slice(1).toLowerCase();\n        }\n        return false;\n      });\n      if (!isCorrectFileType) {\n        const allowedFileTypesString = allowedFileTypes.join(', ');\n        throw new RestrictionError(this.i18n('youCanOnlyUploadFileTypes', {\n          types: allowedFileTypesString\n        }), {\n          file\n        });\n      }\n    }\n\n    // We can't check maxFileSize if the size is unknown.\n    if (maxFileSize && file.size != null && file.size > maxFileSize) {\n      throw new RestrictionError(this.i18n('exceedsSize', {\n        size: prettierBytes(maxFileSize),\n        file: file.name\n      }), {\n        file\n      });\n    }\n\n    // We can't check minFileSize if the size is unknown.\n    if (minFileSize && file.size != null && file.size < minFileSize) {\n      throw new RestrictionError(this.i18n('inferiorSize', {\n        size: prettierBytes(minFileSize)\n      }), {\n        file\n      });\n    }\n  }\n  validate(existingFiles, addingFiles) {\n    addingFiles.forEach(addingFile => {\n      this.validateSingleFile(addingFile);\n    });\n    this.validateAggregateRestrictions(existingFiles, addingFiles);\n  }\n  validateMinNumberOfFiles(files) {\n    const {\n      minNumberOfFiles\n    } = this.getOpts().restrictions;\n    if (minNumberOfFiles && Object.keys(files).length < minNumberOfFiles) {\n      throw new RestrictionError(this.i18n('youHaveToAtLeastSelectX', {\n        smart_count: minNumberOfFiles\n      }));\n    }\n  }\n  getMissingRequiredMetaFields(file) {\n    const error = new RestrictionError(this.i18n('missingRequiredMetaFieldOnFile', {\n      fileName: file.name\n    }));\n    const {\n      requiredMetaFields\n    } = this.getOpts().restrictions;\n    const missingFields = [];\n    for (const field of requiredMetaFields) {\n      if (!Object.hasOwn(file.meta, field) || file.meta[field] === '') {\n        missingFields.push(field);\n      }\n    }\n    return {\n      missingFields,\n      error\n    };\n  }\n}\nexport { Restricter, defaultOptions, RestrictionError };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}