{"ast":null,"code":"function _classPrivateFieldLooseBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n  return receiver;\n}\nvar id = 0;\nfunction _classPrivateFieldLooseKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}\nimport { UIPlugin } from '@uppy/core';\nimport StatusBar from '@uppy/status-bar';\nimport Informer from '@uppy/informer';\nimport ThumbnailGenerator from '@uppy/thumbnail-generator';\nimport findAllDOMElements from '@uppy/utils/lib/findAllDOMElements';\nimport toArray from '@uppy/utils/lib/toArray';\nimport getDroppedFiles from '@uppy/utils/lib/getDroppedFiles';\nimport { defaultPickerIcon } from '@uppy/provider-views';\nimport { nanoid } from 'nanoid/non-secure';\nimport memoizeOne from 'memoize-one';\nimport * as trapFocus from \"./utils/trapFocus.js\";\nimport createSuperFocus from \"./utils/createSuperFocus.js\";\nimport DashboardUI from \"./components/Dashboard.js\";\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\nconst packageJson = {\n  \"version\": \"3.8.0\"\n};\nimport locale from \"./locale.js\";\nconst memoize = memoizeOne.default || memoizeOne;\nconst TAB_KEY = 9;\nconst ESC_KEY = 27;\nfunction createPromise() {\n  const o = {};\n  o.promise = new Promise((resolve, reject) => {\n    o.resolve = resolve;\n    o.reject = reject;\n  });\n  return o;\n}\n// set default options, must be kept in sync with packages/@uppy/react/src/DashboardModal.js\nconst defaultOptions = {\n  target: 'body',\n  metaFields: [],\n  inline: false,\n  width: 750,\n  height: 550,\n  thumbnailWidth: 280,\n  thumbnailType: 'image/jpeg',\n  waitForThumbnailsBeforeUpload: false,\n  defaultPickerIcon,\n  showLinkToFileUploadResult: false,\n  showProgressDetails: false,\n  hideUploadButton: false,\n  hideCancelButton: false,\n  hideRetryButton: false,\n  hidePauseResumeButton: false,\n  hideProgressAfterFinish: false,\n  note: null,\n  closeModalOnClickOutside: false,\n  closeAfterFinish: false,\n  singleFileFullScreen: true,\n  disableStatusBar: false,\n  disableInformer: false,\n  disableThumbnailGenerator: false,\n  disablePageScrollWhenModalOpen: true,\n  animateOpenClose: true,\n  fileManagerSelectionType: 'files',\n  proudlyDisplayPoweredByUppy: true,\n  showSelectedFiles: true,\n  showRemoveButtonAfterComplete: false,\n  browserBackButtonClose: false,\n  showNativePhotoCameraButton: false,\n  showNativeVideoCameraButton: false,\n  theme: 'light',\n  autoOpen: null,\n  autoOpenFileEditor: false,\n  disabled: false,\n  disableLocalFiles: false,\n  // Dynamic default options, they have to be defined in the constructor (because\n  // they require access to the `this` keyword), but we still want them to\n  // appear in the default options so TS knows they'll be defined.\n  doneButtonHandler: null,\n  onRequestCloseModal: null\n};\n\n/**\n * Dashboard UI with previews, metadata editing, tabs for various services and more\n */\nvar _disabledNodes = /*#__PURE__*/_classPrivateFieldLooseKey(\"disabledNodes\");\nvar _generateLargeThumbnailIfSingleFile = /*#__PURE__*/_classPrivateFieldLooseKey(\"generateLargeThumbnailIfSingleFile\");\nvar _openFileEditorWhenFilesAdded = /*#__PURE__*/_classPrivateFieldLooseKey(\"openFileEditorWhenFilesAdded\");\nvar _attachRenderFunctionToTarget = /*#__PURE__*/_classPrivateFieldLooseKey(\"attachRenderFunctionToTarget\");\nvar _isTargetSupported = /*#__PURE__*/_classPrivateFieldLooseKey(\"isTargetSupported\");\nvar _getAcquirers = /*#__PURE__*/_classPrivateFieldLooseKey(\"getAcquirers\");\nvar _getProgressIndicators = /*#__PURE__*/_classPrivateFieldLooseKey(\"getProgressIndicators\");\nvar _getEditors = /*#__PURE__*/_classPrivateFieldLooseKey(\"getEditors\");\nvar _addSpecifiedPluginsFromOptions = /*#__PURE__*/_classPrivateFieldLooseKey(\"addSpecifiedPluginsFromOptions\");\nvar _autoDiscoverPlugins = /*#__PURE__*/_classPrivateFieldLooseKey(\"autoDiscoverPlugins\");\nvar _addSupportedPluginIfNoTarget = /*#__PURE__*/_classPrivateFieldLooseKey(\"addSupportedPluginIfNoTarget\");\nexport default class Dashboard extends UIPlugin {\n  // Timeouts\n\n  constructor(uppy, _opts) {\n    var _this$opts4, _this$opts4$doneButto, _this$opts5, _this$opts5$onRequest;\n    // support for the legacy `autoOpenFileEditor` option,\n    // TODO: we can remove this code when we update the Uppy major version\n    let autoOpen;\n    if (!_opts) {\n      autoOpen = null;\n    } else if (_opts.autoOpen === undefined) {\n      autoOpen = _opts.autoOpenFileEditor ? 'imageEditor' : null;\n    } else {\n      autoOpen = _opts.autoOpen;\n    }\n    super(uppy, {\n      ...defaultOptions,\n      ..._opts,\n      autoOpen\n    });\n    Object.defineProperty(this, _disabledNodes, {\n      writable: true,\n      value: void 0\n    });\n    this.modalName = `uppy-Dashboard-${nanoid()}`;\n    this.superFocus = createSuperFocus();\n    this.ifFocusedOnUppyRecently = false;\n    this.removeTarget = plugin => {\n      const pluginState = this.getPluginState();\n      // filter out the one we want to remove\n      const newTargets = pluginState.targets.filter(target => target.id !== plugin.id);\n      this.setPluginState({\n        targets: newTargets\n      });\n    };\n    this.addTarget = plugin => {\n      const callerPluginId = plugin.id || plugin.constructor.name;\n      const callerPluginName = plugin.title || callerPluginId;\n      const callerPluginType = plugin.type;\n      if (callerPluginType !== 'acquirer' && callerPluginType !== 'progressindicator' && callerPluginType !== 'editor') {\n        const msg = 'Dashboard: can only be targeted by plugins of types: acquirer, progressindicator, editor';\n        this.uppy.log(msg, 'error');\n        return null;\n      }\n      const target = {\n        id: callerPluginId,\n        name: callerPluginName,\n        type: callerPluginType\n      };\n      const state = this.getPluginState();\n      const newTargets = state.targets.slice();\n      newTargets.push(target);\n      this.setPluginState({\n        targets: newTargets\n      });\n      return this.el;\n    };\n    this.hideAllPanels = () => {\n      var _state$activePickerPa;\n      const state = this.getPluginState();\n      const update = {\n        activePickerPanel: undefined,\n        showAddFilesPanel: false,\n        activeOverlayType: null,\n        fileCardFor: null,\n        showFileEditor: false\n      };\n      if (state.activePickerPanel === update.activePickerPanel && state.showAddFilesPanel === update.showAddFilesPanel && state.showFileEditor === update.showFileEditor && state.activeOverlayType === update.activeOverlayType) {\n        // avoid doing a state update if nothing changed\n        return;\n      }\n      this.setPluginState(update);\n      this.uppy.emit('dashboard:close-panel', (_state$activePickerPa = state.activePickerPanel) == null ? void 0 : _state$activePickerPa.id);\n    };\n    this.showPanel = id => {\n      const {\n        targets\n      } = this.getPluginState();\n      const activePickerPanel = targets.find(target => {\n        return target.type === 'acquirer' && target.id === id;\n      });\n      this.setPluginState({\n        activePickerPanel,\n        activeOverlayType: 'PickerPanel'\n      });\n      this.uppy.emit('dashboard:show-panel', id);\n    };\n    this.canEditFile = file => {\n      const {\n        targets\n      } = this.getPluginState();\n      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](targets);\n      return editors.some(target => this.uppy.getPlugin(target.id).canEditFile(file));\n    };\n    this.openFileEditor = file => {\n      const {\n        targets\n      } = this.getPluginState();\n      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](targets);\n      this.setPluginState({\n        showFileEditor: true,\n        fileCardFor: file.id || null,\n        activeOverlayType: 'FileEditor'\n      });\n      editors.forEach(editor => {\n        ;\n        this.uppy.getPlugin(editor.id).selectFile(file);\n      });\n    };\n    this.closeFileEditor = () => {\n      const {\n        metaFields\n      } = this.getPluginState();\n      const isMetaEditorEnabled = metaFields && metaFields.length > 0;\n      if (isMetaEditorEnabled) {\n        this.setPluginState({\n          showFileEditor: false,\n          activeOverlayType: 'FileCard'\n        });\n      } else {\n        this.setPluginState({\n          showFileEditor: false,\n          fileCardFor: null,\n          activeOverlayType: 'AddFiles'\n        });\n      }\n    };\n    this.saveFileEditor = () => {\n      const {\n        targets\n      } = this.getPluginState();\n      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](targets);\n      editors.forEach(editor => {\n        ;\n        this.uppy.getPlugin(editor.id).save();\n      });\n      this.closeFileEditor();\n    };\n    this.openModal = () => {\n      const {\n        promise,\n        resolve\n      } = createPromise();\n      // save scroll position\n      this.savedScrollPosition = window.pageYOffset;\n      // save active element, so we can restore focus when modal is closed\n      this.savedActiveElement = document.activeElement;\n      if (this.opts.disablePageScrollWhenModalOpen) {\n        document.body.classList.add('uppy-Dashboard-isFixed');\n      }\n      if (this.opts.animateOpenClose && this.getPluginState().isClosing) {\n        const handler = () => {\n          this.setPluginState({\n            isHidden: false\n          });\n          this.el.removeEventListener('animationend', handler, false);\n          resolve();\n        };\n        this.el.addEventListener('animationend', handler, false);\n      } else {\n        this.setPluginState({\n          isHidden: false\n        });\n        resolve();\n      }\n      if (this.opts.browserBackButtonClose) {\n        this.updateBrowserHistory();\n      }\n\n      // handle ESC and TAB keys in modal dialog\n      document.addEventListener('keydown', this.handleKeyDownInModal);\n      this.uppy.emit('dashboard:modal-open');\n      return promise;\n    };\n    this.closeModal = opts => {\n      var _opts$manualClose;\n      // Whether the modal is being closed by the user (`true`) or by other means (e.g. browser back button)\n      const manualClose = (_opts$manualClose = opts == null ? void 0 : opts.manualClose) != null ? _opts$manualClose : true;\n      const {\n        isHidden,\n        isClosing\n      } = this.getPluginState();\n      if (isHidden || isClosing) {\n        // short-circuit if animation is ongoing\n        return undefined;\n      }\n      const {\n        promise,\n        resolve\n      } = createPromise();\n      if (this.opts.disablePageScrollWhenModalOpen) {\n        document.body.classList.remove('uppy-Dashboard-isFixed');\n      }\n      if (this.opts.animateOpenClose) {\n        this.setPluginState({\n          isClosing: true\n        });\n        const handler = () => {\n          this.setPluginState({\n            isHidden: true,\n            isClosing: false\n          });\n          this.superFocus.cancel();\n          this.savedActiveElement.focus();\n          this.el.removeEventListener('animationend', handler, false);\n          resolve();\n        };\n        this.el.addEventListener('animationend', handler, false);\n      } else {\n        this.setPluginState({\n          isHidden: true\n        });\n        this.superFocus.cancel();\n        this.savedActiveElement.focus();\n        resolve();\n      }\n\n      // handle ESC and TAB keys in modal dialog\n      document.removeEventListener('keydown', this.handleKeyDownInModal);\n      if (manualClose) {\n        if (this.opts.browserBackButtonClose) {\n          var _history$state;\n          // Make sure that the latest entry in the history state is our modal name\n          // eslint-disable-next-line no-restricted-globals\n          if ((_history$state = history.state) != null && _history$state[this.modalName]) {\n            // Go back in history to clear out the entry we created (ultimately closing the modal)\n            // eslint-disable-next-line no-restricted-globals\n            history.back();\n          }\n        }\n      }\n      this.uppy.emit('dashboard:modal-closed');\n      return promise;\n    };\n    this.isModalOpen = () => {\n      return !this.getPluginState().isHidden || false;\n    };\n    this.requestCloseModal = () => {\n      if (this.opts.onRequestCloseModal) {\n        return this.opts.onRequestCloseModal();\n      }\n      return this.closeModal();\n    };\n    this.setDarkModeCapability = isDarkModeOn => {\n      const {\n        capabilities\n      } = this.uppy.getState();\n      this.uppy.setState({\n        capabilities: {\n          ...capabilities,\n          darkMode: isDarkModeOn\n        }\n      });\n    };\n    this.handleSystemDarkModeChange = event => {\n      const isDarkModeOnNow = event.matches;\n      this.uppy.log(`[Dashboard] Dark mode is ${isDarkModeOnNow ? 'on' : 'off'}`);\n      this.setDarkModeCapability(isDarkModeOnNow);\n    };\n    this.toggleFileCard = (show, fileID) => {\n      const file = this.uppy.getFile(fileID);\n      if (show) {\n        this.uppy.emit('dashboard:file-edit-start', file);\n      } else {\n        this.uppy.emit('dashboard:file-edit-complete', file);\n      }\n      this.setPluginState({\n        fileCardFor: show ? fileID : null,\n        activeOverlayType: show ? 'FileCard' : null\n      });\n    };\n    this.toggleAddFilesPanel = show => {\n      this.setPluginState({\n        showAddFilesPanel: show,\n        activeOverlayType: show ? 'AddFiles' : null\n      });\n    };\n    this.addFiles = files => {\n      const descriptors = files.map(file => ({\n        source: this.id,\n        name: file.name,\n        type: file.type,\n        data: file,\n        meta: {\n          // path of the file relative to the ancestor directory the user selected.\n          // e.g. 'docs/Old Prague/airbnb.pdf'\n          relativePath: file.relativePath || file.webkitRelativePath || null\n        }\n      }));\n      try {\n        this.uppy.addFiles(descriptors);\n      } catch (err) {\n        this.uppy.log(err);\n      }\n    };\n    // ___Why make insides of Dashboard invisible until first ResizeObserver event is emitted?\n    //    ResizeOberserver doesn't emit the first resize event fast enough, users can see the jump from one .uppy-size-- to\n    //    another (e.g. in Safari)\n    // ___Why not apply visibility property to .uppy-Dashboard-inner?\n    //    Because ideally, acc to specs, ResizeObserver should see invisible elements as of width 0. So even though applying\n    //    invisibility to .uppy-Dashboard-inner works now, it may not work in the future.\n    this.startListeningToResize = () => {\n      // Watch for Dashboard container (`.uppy-Dashboard-inner`) resize\n      // and update containerWidth/containerHeight in plugin state accordingly.\n      // Emits first event on initialization.\n      this.resizeObserver = new ResizeObserver(entries => {\n        const uppyDashboardInnerEl = entries[0];\n        const {\n          width,\n          height\n        } = uppyDashboardInnerEl.contentRect;\n        this.setPluginState({\n          containerWidth: width,\n          containerHeight: height,\n          areInsidesReadyToBeVisible: true\n        });\n      });\n      this.resizeObserver.observe(this.el.querySelector('.uppy-Dashboard-inner'));\n\n      // If ResizeObserver fails to emit an event telling us what size to use - default to the mobile view\n      this.makeDashboardInsidesVisibleAnywayTimeout = setTimeout(() => {\n        const pluginState = this.getPluginState();\n        const isModalAndClosed = !this.opts.inline && pluginState.isHidden;\n        if (\n        // We might want to enable this in the future\n\n        // if ResizeObserver hasn't yet fired,\n        !pluginState.areInsidesReadyToBeVisible &&\n        // and it's not due to the modal being closed\n        !isModalAndClosed) {\n          this.uppy.log('[Dashboard] resize event didn’t fire on time: defaulted to mobile layout', 'warning');\n          this.setPluginState({\n            areInsidesReadyToBeVisible: true\n          });\n        }\n      }, 1000);\n    };\n    this.stopListeningToResize = () => {\n      this.resizeObserver.disconnect();\n      clearTimeout(this.makeDashboardInsidesVisibleAnywayTimeout);\n    };\n    // Records whether we have been interacting with uppy right now,\n    // which is then used to determine whether state updates should trigger a refocusing.\n    this.recordIfFocusedOnUppyRecently = event => {\n      if (this.el.contains(event.target)) {\n        this.ifFocusedOnUppyRecently = true;\n      } else {\n        this.ifFocusedOnUppyRecently = false;\n        // ___Why run this.superFocus.cancel here when it already runs in superFocusOnEachUpdate?\n        //    Because superFocus is debounced, when we move from Uppy to some other element on the page,\n        //    previously run superFocus sometimes hits and moves focus back to Uppy.\n        this.superFocus.cancel();\n      }\n    };\n    this.disableInteractiveElements = disable => {\n      var _classPrivateFieldLoo;\n      const NODES_TO_DISABLE = ['a[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', '[role=\"button\"]:not([disabled])'];\n      const nodesToDisable = (_classPrivateFieldLoo = _classPrivateFieldLooseBase(this, _disabledNodes)[_disabledNodes]) != null ? _classPrivateFieldLoo : toArray(this.el.querySelectorAll(NODES_TO_DISABLE)).filter(node => !node.classList.contains('uppy-Dashboard-close'));\n      for (const node of nodesToDisable) {\n        // Links can’t have `disabled` attr, so we use `aria-disabled` for a11y\n        if (node.tagName === 'A') {\n          node.setAttribute('aria-disabled', disable);\n        } else {\n          node.disabled = disable;\n        }\n      }\n      if (disable) {\n        _classPrivateFieldLooseBase(this, _disabledNodes)[_disabledNodes] = nodesToDisable;\n      } else {\n        _classPrivateFieldLooseBase(this, _disabledNodes)[_disabledNodes] = null;\n      }\n      this.dashboardIsDisabled = disable;\n    };\n    this.updateBrowserHistory = () => {\n      var _history$state2;\n      // Ensure history state does not already contain our modal name to avoid double-pushing\n      // eslint-disable-next-line no-restricted-globals\n      if (!((_history$state2 = history.state) != null && _history$state2[this.modalName])) {\n        // Push to history so that the page is not lost on browser back button press\n        // eslint-disable-next-line no-restricted-globals\n        history.pushState({\n          // eslint-disable-next-line no-restricted-globals\n          ...history.state,\n          [this.modalName]: true\n        }, '');\n      }\n\n      // Listen for back button presses\n      window.addEventListener('popstate', this.handlePopState, false);\n    };\n    this.handlePopState = event => {\n      var _event$state;\n      // Close the modal if the history state no longer contains our modal name\n      if (this.isModalOpen() && (!event.state || !event.state[this.modalName])) {\n        this.closeModal({\n          manualClose: false\n        });\n      }\n\n      // When the browser back button is pressed and uppy is now the latest entry\n      // in the history but the modal is closed, fix the history by removing the\n      // uppy history entry.\n      // This occurs when another entry is added into the history state while the\n      // modal is open, and then the modal gets manually closed.\n      // Solves PR #575 (https://github.com/transloadit/uppy/pull/575)\n      if (!this.isModalOpen() && (_event$state = event.state) != null && _event$state[this.modalName]) {\n        // eslint-disable-next-line no-restricted-globals\n        history.back();\n      }\n    };\n    this.handleKeyDownInModal = event => {\n      // close modal on esc key press\n      if (event.keyCode === ESC_KEY) this.requestCloseModal();\n      // trap focus on tab key press\n      if (event.keyCode === TAB_KEY) trapFocus.forModal(event, this.getPluginState().activeOverlayType, this.el);\n    };\n    this.handleClickOutside = () => {\n      if (this.opts.closeModalOnClickOutside) this.requestCloseModal();\n    };\n    this.handlePaste = event => {\n      // Let any acquirer plugin (Url/Webcam/etc.) handle pastes to the root\n      this.uppy.iteratePlugins(plugin => {\n        if (plugin.type === 'acquirer') {\n          // Every Plugin with .type acquirer can define handleRootPaste(event)\n          ;\n          plugin.handleRootPaste == null || plugin.handleRootPaste(event);\n        }\n      });\n\n      // Add all dropped files\n      const files = toArray(event.clipboardData.files);\n      if (files.length > 0) {\n        this.uppy.log('[Dashboard] Files pasted');\n        this.addFiles(files);\n      }\n    };\n    this.handleInputChange = event => {\n      event.preventDefault();\n      const files = toArray(event.target.files);\n      if (files.length > 0) {\n        this.uppy.log('[Dashboard] Files selected through input');\n        this.addFiles(files);\n      }\n    };\n    this.handleDragOver = event => {\n      var _this$opts$onDragOver, _this$opts;\n      event.preventDefault();\n      event.stopPropagation();\n\n      // Check if some plugin can handle the datatransfer without files —\n      // for instance, the Url plugin can import a url\n      const canSomePluginHandleRootDrop = () => {\n        let somePluginCanHandleRootDrop = true;\n        this.uppy.iteratePlugins(plugin => {\n          if (plugin.canHandleRootDrop != null && plugin.canHandleRootDrop(event)) {\n            somePluginCanHandleRootDrop = true;\n          }\n        });\n        return somePluginCanHandleRootDrop;\n      };\n\n      // Check if the \"type\" of the datatransfer object includes files\n      const doesEventHaveFiles = () => {\n        const {\n          types\n        } = event.dataTransfer;\n        return types.some(type => type === 'Files');\n      };\n\n      // Deny drop, if no plugins can handle datatransfer, there are no files,\n      // or when opts.disabled is set, or new uploads are not allowed\n      const somePluginCanHandleRootDrop = canSomePluginHandleRootDrop();\n      const hasFiles = doesEventHaveFiles();\n      if (!somePluginCanHandleRootDrop && !hasFiles || this.opts.disabled ||\n      // opts.disableLocalFiles should only be taken into account if no plugins\n      // can handle the datatransfer\n      this.opts.disableLocalFiles && (hasFiles || !somePluginCanHandleRootDrop) || !this.uppy.getState().allowNewUpload) {\n        event.dataTransfer.dropEffect = 'none'; // eslint-disable-line no-param-reassign\n        clearTimeout(this.removeDragOverClassTimeout);\n        return;\n      }\n\n      // Add a small (+) icon on drop\n      // (and prevent browsers from interpreting this as files being _moved_ into the\n      // browser, https://github.com/transloadit/uppy/issues/1978).\n      event.dataTransfer.dropEffect = 'copy'; // eslint-disable-line no-param-reassign\n\n      clearTimeout(this.removeDragOverClassTimeout);\n      this.setPluginState({\n        isDraggingOver: true\n      });\n      (_this$opts$onDragOver = (_this$opts = this.opts).onDragOver) == null || _this$opts$onDragOver.call(_this$opts, event);\n    };\n    this.handleDragLeave = event => {\n      var _this$opts$onDragLeav, _this$opts2;\n      event.preventDefault();\n      event.stopPropagation();\n      clearTimeout(this.removeDragOverClassTimeout);\n      // Timeout against flickering, this solution is taken from drag-drop library.\n      // Solution with 'pointer-events: none' didn't work across browsers.\n      this.removeDragOverClassTimeout = setTimeout(() => {\n        this.setPluginState({\n          isDraggingOver: false\n        });\n      }, 50);\n      (_this$opts$onDragLeav = (_this$opts2 = this.opts).onDragLeave) == null || _this$opts$onDragLeav.call(_this$opts2, event);\n    };\n    this.handleDrop = async event => {\n      var _this$opts$onDrop, _this$opts3;\n      event.preventDefault();\n      event.stopPropagation();\n      clearTimeout(this.removeDragOverClassTimeout);\n      this.setPluginState({\n        isDraggingOver: false\n      });\n\n      // Let any acquirer plugin (Url/Webcam/etc.) handle drops to the root\n      this.uppy.iteratePlugins(plugin => {\n        if (plugin.type === 'acquirer') {\n          // Every Plugin with .type acquirer can define handleRootDrop(event)\n          ;\n          plugin.handleRootDrop == null || plugin.handleRootDrop(event);\n        }\n      });\n\n      // Add all dropped files\n      let executedDropErrorOnce = false;\n      const logDropError = error => {\n        this.uppy.log(error, 'error');\n\n        // In practice all drop errors are most likely the same,\n        // so let's just show one to avoid overwhelming the user\n        if (!executedDropErrorOnce) {\n          this.uppy.info(error.message, 'error');\n          executedDropErrorOnce = true;\n        }\n      };\n      this.uppy.log('[Dashboard] Processing dropped files');\n\n      // Add all dropped files\n      const files = await getDroppedFiles(event.dataTransfer, {\n        logDropError\n      });\n      if (files.length > 0) {\n        this.uppy.log('[Dashboard] Files dropped');\n        this.addFiles(files);\n      }\n      (_this$opts$onDrop = (_this$opts3 = this.opts).onDrop) == null || _this$opts$onDrop.call(_this$opts3, event);\n    };\n    this.handleRequestThumbnail = file => {\n      if (!this.opts.waitForThumbnailsBeforeUpload) {\n        this.uppy.emit('thumbnail:request', file);\n      }\n    };\n    /**\n     * We cancel thumbnail requests when a file item component unmounts to avoid\n     * clogging up the queue when the user scrolls past many elements.\n     */\n    this.handleCancelThumbnail = file => {\n      if (!this.opts.waitForThumbnailsBeforeUpload) {\n        this.uppy.emit('thumbnail:cancel', file);\n      }\n    };\n    this.handleKeyDownInInline = event => {\n      // Trap focus on tab key press.\n      if (event.keyCode === TAB_KEY) trapFocus.forInline(event, this.getPluginState().activeOverlayType, this.el);\n    };\n    // ___Why do we listen to the 'paste' event on a document instead of onPaste={props.handlePaste} prop,\n    //    or this.el.addEventListener('paste')?\n    //    Because (at least) Chrome doesn't handle paste if focus is on some button, e.g. 'My Device'.\n    //    => Therefore, the best option is to listen to all 'paste' events, and only react to them when we are focused on our\n    //       particular Uppy instance.\n    // ___Why do we still need onPaste={props.handlePaste} for the DashboardUi?\n    //    Because if we click on the 'Drop files here' caption e.g., `document.activeElement` will be 'body'. Which means our\n    //    standard determination of whether we're pasting into our Uppy instance won't work.\n    //    => Therefore, we need a traditional onPaste={props.handlePaste} handler too.\n    this.handlePasteOnBody = event => {\n      const isFocusInOverlay = this.el.contains(document.activeElement);\n      if (isFocusInOverlay) {\n        this.handlePaste(event);\n      }\n    };\n    this.handleComplete = _ref => {\n      let {\n        failed\n      } = _ref;\n      if (this.opts.closeAfterFinish && !(failed != null && failed.length)) {\n        // All uploads are done\n        this.requestCloseModal();\n      }\n    };\n    this.handleCancelRestore = () => {\n      this.uppy.emit('restore-canceled');\n    };\n    Object.defineProperty(this, _generateLargeThumbnailIfSingleFile, {\n      writable: true,\n      value: () => {\n        if (this.opts.disableThumbnailGenerator) {\n          return;\n        }\n        const LARGE_THUMBNAIL = 600;\n        const files = this.uppy.getFiles();\n        if (files.length === 1) {\n          const thumbnailGenerator = this.uppy.getPlugin(`${this.id}:ThumbnailGenerator`);\n          thumbnailGenerator == null || thumbnailGenerator.setOptions({\n            thumbnailWidth: LARGE_THUMBNAIL\n          });\n          const fileForThumbnail = {\n            ...files[0],\n            preview: undefined\n          };\n          thumbnailGenerator == null || thumbnailGenerator.requestThumbnail(fileForThumbnail).then(() => {\n            thumbnailGenerator == null || thumbnailGenerator.setOptions({\n              thumbnailWidth: this.opts.thumbnailWidth\n            });\n          });\n        }\n      }\n    });\n    Object.defineProperty(this, _openFileEditorWhenFilesAdded, {\n      writable: true,\n      value: files => {\n        const firstFile = files[0];\n        const {\n          metaFields\n        } = this.getPluginState();\n        const isMetaEditorEnabled = metaFields && metaFields.length > 0;\n        const isImageEditorEnabled = this.canEditFile(firstFile);\n        if (isMetaEditorEnabled && this.opts.autoOpen === 'metaEditor') {\n          this.toggleFileCard(true, firstFile.id);\n        } else if (isImageEditorEnabled && this.opts.autoOpen === 'imageEditor') {\n          this.openFileEditor(firstFile);\n        }\n      }\n    });\n    this.initEvents = () => {\n      // Modal open button\n      if (this.opts.trigger && !this.opts.inline) {\n        const showModalTrigger = findAllDOMElements(this.opts.trigger);\n        if (showModalTrigger) {\n          showModalTrigger.forEach(trigger => trigger.addEventListener('click', this.openModal));\n        } else {\n          this.uppy.log('Dashboard modal trigger not found. Make sure `trigger` is set in Dashboard options, unless you are planning to call `dashboard.openModal()` method yourself', 'warning');\n        }\n      }\n      this.startListeningToResize();\n      document.addEventListener('paste', this.handlePasteOnBody);\n      this.uppy.on('plugin-added', _classPrivateFieldLooseBase(this, _addSupportedPluginIfNoTarget)[_addSupportedPluginIfNoTarget]);\n      this.uppy.on('plugin-remove', this.removeTarget);\n      this.uppy.on('file-added', this.hideAllPanels);\n      this.uppy.on('dashboard:modal-closed', this.hideAllPanels);\n      this.uppy.on('complete', this.handleComplete);\n      this.uppy.on('files-added', _classPrivateFieldLooseBase(this, _generateLargeThumbnailIfSingleFile)[_generateLargeThumbnailIfSingleFile]);\n      this.uppy.on('file-removed', _classPrivateFieldLooseBase(this, _generateLargeThumbnailIfSingleFile)[_generateLargeThumbnailIfSingleFile]);\n\n      // ___Why fire on capture?\n      //    Because this.ifFocusedOnUppyRecently needs to change before onUpdate() fires.\n      document.addEventListener('focus', this.recordIfFocusedOnUppyRecently, true);\n      document.addEventListener('click', this.recordIfFocusedOnUppyRecently, true);\n      if (this.opts.inline) {\n        this.el.addEventListener('keydown', this.handleKeyDownInInline);\n      }\n      if (this.opts.autoOpen) {\n        this.uppy.on('files-added', _classPrivateFieldLooseBase(this, _openFileEditorWhenFilesAdded)[_openFileEditorWhenFilesAdded]);\n      }\n    };\n    this.removeEvents = () => {\n      const showModalTrigger = findAllDOMElements(this.opts.trigger);\n      if (!this.opts.inline && showModalTrigger) {\n        showModalTrigger.forEach(trigger => trigger.removeEventListener('click', this.openModal));\n      }\n      this.stopListeningToResize();\n      document.removeEventListener('paste', this.handlePasteOnBody);\n      window.removeEventListener('popstate', this.handlePopState, false);\n      this.uppy.off('plugin-added', _classPrivateFieldLooseBase(this, _addSupportedPluginIfNoTarget)[_addSupportedPluginIfNoTarget]);\n      this.uppy.off('plugin-remove', this.removeTarget);\n      this.uppy.off('file-added', this.hideAllPanels);\n      this.uppy.off('dashboard:modal-closed', this.hideAllPanels);\n      this.uppy.off('complete', this.handleComplete);\n      this.uppy.off('files-added', _classPrivateFieldLooseBase(this, _generateLargeThumbnailIfSingleFile)[_generateLargeThumbnailIfSingleFile]);\n      this.uppy.off('file-removed', _classPrivateFieldLooseBase(this, _generateLargeThumbnailIfSingleFile)[_generateLargeThumbnailIfSingleFile]);\n      document.removeEventListener('focus', this.recordIfFocusedOnUppyRecently);\n      document.removeEventListener('click', this.recordIfFocusedOnUppyRecently);\n      if (this.opts.inline) {\n        this.el.removeEventListener('keydown', this.handleKeyDownInInline);\n      }\n      if (this.opts.autoOpen) {\n        this.uppy.off('files-added', _classPrivateFieldLooseBase(this, _openFileEditorWhenFilesAdded)[_openFileEditorWhenFilesAdded]);\n      }\n    };\n    this.superFocusOnEachUpdate = () => {\n      const isFocusInUppy = this.el.contains(document.activeElement);\n      // When focus is lost on the page (== focus is on body for most browsers, or focus is null for IE11)\n      const isFocusNowhere = document.activeElement === document.body || document.activeElement === null;\n      const isInformerHidden = this.uppy.getState().info.length === 0;\n      const isModal = !this.opts.inline;\n      if (\n      // If update is connected to showing the Informer - let the screen reader calmly read it.\n      isInformerHidden && (\n      // If we are in a modal - always superfocus without concern for other elements\n      // on the page (user is unlikely to want to interact with the rest of the page)\n      isModal ||\n      // If we are already inside of Uppy, or\n      isFocusInUppy ||\n      // If we are not focused on anything BUT we have already, at least once, focused on uppy\n      //   1. We focus when isFocusNowhere, because when the element we were focused\n      //      on disappears (e.g. an overlay), - focus gets lost. If user is typing\n      //      something somewhere else on the page, - focus won't be 'nowhere'.\n      //   2. We only focus when focus is nowhere AND this.ifFocusedOnUppyRecently,\n      //      to avoid focus jumps if we do something else on the page.\n      //   [Practical check] Without '&& this.ifFocusedOnUppyRecently', in Safari, in inline mode,\n      //                     when file is uploading, - navigate via tab to the checkbox,\n      //                     try to press space multiple times. Focus will jump to Uppy.\n      isFocusNowhere && this.ifFocusedOnUppyRecently)) {\n        this.superFocus(this.el, this.getPluginState().activeOverlayType);\n      } else {\n        this.superFocus.cancel();\n      }\n    };\n    this.afterUpdate = () => {\n      if (this.opts.disabled && !this.dashboardIsDisabled) {\n        this.disableInteractiveElements(true);\n        return;\n      }\n      if (!this.opts.disabled && this.dashboardIsDisabled) {\n        this.disableInteractiveElements(false);\n      }\n      this.superFocusOnEachUpdate();\n    };\n    this.saveFileCard = (meta, fileID) => {\n      this.uppy.setFileMeta(fileID, meta);\n      this.toggleFileCard(false, fileID);\n    };\n    Object.defineProperty(this, _attachRenderFunctionToTarget, {\n      writable: true,\n      value: target => {\n        const plugin = this.uppy.getPlugin(target.id);\n        return {\n          ...target,\n          icon: plugin.icon || this.opts.defaultPickerIcon,\n          render: plugin.render\n        };\n      }\n    });\n    Object.defineProperty(this, _isTargetSupported, {\n      writable: true,\n      value: target => {\n        const plugin = this.uppy.getPlugin(target.id);\n        // If the plugin does not provide a `supported` check, assume the plugin works everywhere.\n        if (typeof plugin.isSupported !== 'function') {\n          return true;\n        }\n        return plugin.isSupported();\n      }\n    });\n    Object.defineProperty(this, _getAcquirers, {\n      writable: true,\n      value: memoize(targets => {\n        return targets.filter(target => target.type === 'acquirer' && _classPrivateFieldLooseBase(this, _isTargetSupported)[_isTargetSupported](target)).map(_classPrivateFieldLooseBase(this, _attachRenderFunctionToTarget)[_attachRenderFunctionToTarget]);\n      })\n    });\n    Object.defineProperty(this, _getProgressIndicators, {\n      writable: true,\n      value: memoize(targets => {\n        return targets.filter(target => target.type === 'progressindicator').map(_classPrivateFieldLooseBase(this, _attachRenderFunctionToTarget)[_attachRenderFunctionToTarget]);\n      })\n    });\n    Object.defineProperty(this, _getEditors, {\n      writable: true,\n      value: memoize(targets => {\n        return targets.filter(target => target.type === 'editor').map(_classPrivateFieldLooseBase(this, _attachRenderFunctionToTarget)[_attachRenderFunctionToTarget]);\n      })\n    });\n    this.render = state => {\n      const pluginState = this.getPluginState();\n      const {\n        files,\n        capabilities,\n        allowNewUpload\n      } = state;\n      const {\n        newFiles,\n        uploadStartedFiles,\n        completeFiles,\n        erroredFiles,\n        inProgressFiles,\n        inProgressNotPausedFiles,\n        processingFiles,\n        isUploadStarted,\n        isAllComplete,\n        isAllErrored,\n        isAllPaused\n      } = this.uppy.getObjectOfFilesPerState();\n      const acquirers = _classPrivateFieldLooseBase(this, _getAcquirers)[_getAcquirers](pluginState.targets);\n      const progressindicators = _classPrivateFieldLooseBase(this, _getProgressIndicators)[_getProgressIndicators](pluginState.targets);\n      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](pluginState.targets);\n      let theme;\n      if (this.opts.theme === 'auto') {\n        theme = capabilities.darkMode ? 'dark' : 'light';\n      } else {\n        theme = this.opts.theme;\n      }\n      if (['files', 'folders', 'both'].indexOf(this.opts.fileManagerSelectionType) < 0) {\n        this.opts.fileManagerSelectionType = 'files';\n        // eslint-disable-next-line no-console\n        console.warn(`Unsupported option for \"fileManagerSelectionType\". Using default of \"${this.opts.fileManagerSelectionType}\".`);\n      }\n      return DashboardUI({\n        state,\n        isHidden: pluginState.isHidden,\n        files,\n        newFiles,\n        uploadStartedFiles,\n        completeFiles,\n        erroredFiles,\n        inProgressFiles,\n        inProgressNotPausedFiles,\n        processingFiles,\n        isUploadStarted,\n        isAllComplete,\n        isAllErrored,\n        isAllPaused,\n        totalFileCount: Object.keys(files).length,\n        totalProgress: state.totalProgress,\n        allowNewUpload,\n        acquirers,\n        theme,\n        disabled: this.opts.disabled,\n        disableLocalFiles: this.opts.disableLocalFiles,\n        direction: this.opts.direction,\n        activePickerPanel: pluginState.activePickerPanel,\n        showFileEditor: pluginState.showFileEditor,\n        saveFileEditor: this.saveFileEditor,\n        closeFileEditor: this.closeFileEditor,\n        disableInteractiveElements: this.disableInteractiveElements,\n        animateOpenClose: this.opts.animateOpenClose,\n        isClosing: pluginState.isClosing,\n        progressindicators,\n        editors,\n        autoProceed: this.uppy.opts.autoProceed,\n        id: this.id,\n        closeModal: this.requestCloseModal,\n        handleClickOutside: this.handleClickOutside,\n        handleInputChange: this.handleInputChange,\n        handlePaste: this.handlePaste,\n        inline: this.opts.inline,\n        showPanel: this.showPanel,\n        hideAllPanels: this.hideAllPanels,\n        i18n: this.i18n,\n        i18nArray: this.i18nArray,\n        uppy: this.uppy,\n        note: this.opts.note,\n        recoveredState: state.recoveredState,\n        metaFields: pluginState.metaFields,\n        resumableUploads: capabilities.resumableUploads || false,\n        individualCancellation: capabilities.individualCancellation,\n        isMobileDevice: capabilities.isMobileDevice,\n        fileCardFor: pluginState.fileCardFor,\n        toggleFileCard: this.toggleFileCard,\n        toggleAddFilesPanel: this.toggleAddFilesPanel,\n        showAddFilesPanel: pluginState.showAddFilesPanel,\n        saveFileCard: this.saveFileCard,\n        openFileEditor: this.openFileEditor,\n        canEditFile: this.canEditFile,\n        width: this.opts.width,\n        height: this.opts.height,\n        showLinkToFileUploadResult: this.opts.showLinkToFileUploadResult,\n        fileManagerSelectionType: this.opts.fileManagerSelectionType,\n        proudlyDisplayPoweredByUppy: this.opts.proudlyDisplayPoweredByUppy,\n        hideCancelButton: this.opts.hideCancelButton,\n        hideRetryButton: this.opts.hideRetryButton,\n        hidePauseResumeButton: this.opts.hidePauseResumeButton,\n        showRemoveButtonAfterComplete: this.opts.showRemoveButtonAfterComplete,\n        containerWidth: pluginState.containerWidth,\n        containerHeight: pluginState.containerHeight,\n        areInsidesReadyToBeVisible: pluginState.areInsidesReadyToBeVisible,\n        isTargetDOMEl: this.isTargetDOMEl,\n        parentElement: this.el,\n        allowedFileTypes: this.uppy.opts.restrictions.allowedFileTypes,\n        maxNumberOfFiles: this.uppy.opts.restrictions.maxNumberOfFiles,\n        requiredMetaFields: this.uppy.opts.restrictions.requiredMetaFields,\n        showSelectedFiles: this.opts.showSelectedFiles,\n        showNativePhotoCameraButton: this.opts.showNativePhotoCameraButton,\n        showNativeVideoCameraButton: this.opts.showNativeVideoCameraButton,\n        nativeCameraFacingMode: this.opts.nativeCameraFacingMode,\n        singleFileFullScreen: this.opts.singleFileFullScreen,\n        handleCancelRestore: this.handleCancelRestore,\n        handleRequestThumbnail: this.handleRequestThumbnail,\n        handleCancelThumbnail: this.handleCancelThumbnail,\n        // drag props\n        isDraggingOver: pluginState.isDraggingOver,\n        handleDragOver: this.handleDragOver,\n        handleDragLeave: this.handleDragLeave,\n        handleDrop: this.handleDrop\n      });\n    };\n    Object.defineProperty(this, _addSpecifiedPluginsFromOptions, {\n      writable: true,\n      value: () => {\n        const plugins = this.opts.plugins || [];\n        plugins.forEach(pluginID => {\n          const plugin = this.uppy.getPlugin(pluginID);\n          if (plugin) {\n            ;\n            plugin.mount(this, plugin);\n          } else {\n            this.uppy.log(`[Uppy] Dashboard could not find plugin '${pluginID}', make sure to uppy.use() the plugins you are specifying`, 'warning');\n          }\n        });\n      }\n    });\n    Object.defineProperty(this, _autoDiscoverPlugins, {\n      writable: true,\n      value: () => {\n        this.uppy.iteratePlugins(_classPrivateFieldLooseBase(this, _addSupportedPluginIfNoTarget)[_addSupportedPluginIfNoTarget]);\n      }\n    });\n    Object.defineProperty(this, _addSupportedPluginIfNoTarget, {\n      writable: true,\n      value: plugin => {\n        var _plugin$opts;\n        // Only these types belong on the Dashboard,\n        // we wouldn’t want to try and mount Compressor or Tus, for example.\n        const typesAllowed = ['acquirer', 'editor'];\n        if (plugin && !((_plugin$opts = plugin.opts) != null && _plugin$opts.target) && typesAllowed.includes(plugin.type)) {\n          const pluginAlreadyAdded = this.getPluginState().targets.some(installedPlugin => plugin.id === installedPlugin.id);\n          if (!pluginAlreadyAdded) {\n            ;\n            plugin.mount(this, plugin);\n          }\n        }\n      }\n    });\n    this.install = () => {\n      // Set default state for Dashboard\n      this.setPluginState({\n        isHidden: true,\n        fileCardFor: null,\n        activeOverlayType: null,\n        showAddFilesPanel: false,\n        activePickerPanel: undefined,\n        showFileEditor: false,\n        metaFields: this.opts.metaFields,\n        targets: [],\n        // We'll make them visible once .containerWidth is determined\n        areInsidesReadyToBeVisible: false,\n        isDraggingOver: false\n      });\n      const {\n        inline,\n        closeAfterFinish\n      } = this.opts;\n      if (inline && closeAfterFinish) {\n        throw new Error('[Dashboard] `closeAfterFinish: true` cannot be used on an inline Dashboard, because an inline Dashboard cannot be closed at all. Either set `inline: false`, or disable the `closeAfterFinish` option.');\n      }\n      const {\n        allowMultipleUploads,\n        allowMultipleUploadBatches\n      } = this.uppy.opts;\n      if ((allowMultipleUploads || allowMultipleUploadBatches) && closeAfterFinish) {\n        this.uppy.log('[Dashboard] When using `closeAfterFinish`, we recommended setting the `allowMultipleUploadBatches` option to `false` in the Uppy constructor. See https://uppy.io/docs/uppy/#allowMultipleUploads-true', 'warning');\n      }\n      const {\n        target\n      } = this.opts;\n      if (target) {\n        this.mount(target, this);\n      }\n      if (!this.opts.disableStatusBar) {\n        this.uppy.use(StatusBar, {\n          id: `${this.id}:StatusBar`,\n          target: this,\n          hideUploadButton: this.opts.hideUploadButton,\n          hideRetryButton: this.opts.hideRetryButton,\n          hidePauseResumeButton: this.opts.hidePauseResumeButton,\n          hideCancelButton: this.opts.hideCancelButton,\n          showProgressDetails: this.opts.showProgressDetails,\n          hideAfterFinish: this.opts.hideProgressAfterFinish,\n          locale: this.opts.locale,\n          doneButtonHandler: this.opts.doneButtonHandler\n        });\n      }\n      if (!this.opts.disableInformer) {\n        this.uppy.use(Informer, {\n          id: `${this.id}:Informer`,\n          target: this\n        });\n      }\n      if (!this.opts.disableThumbnailGenerator) {\n        this.uppy.use(ThumbnailGenerator, {\n          id: `${this.id}:ThumbnailGenerator`,\n          thumbnailWidth: this.opts.thumbnailWidth,\n          thumbnailHeight: this.opts.thumbnailHeight,\n          thumbnailType: this.opts.thumbnailType,\n          waitForThumbnailsBeforeUpload: this.opts.waitForThumbnailsBeforeUpload,\n          // If we don't block on thumbnails, we can lazily generate them\n          lazy: !this.opts.waitForThumbnailsBeforeUpload\n        });\n      }\n\n      // Dark Mode / theme\n      this.darkModeMediaQuery = typeof window !== 'undefined' && window.matchMedia ? window.matchMedia('(prefers-color-scheme: dark)') : null;\n      const isDarkModeOnFromTheStart = this.darkModeMediaQuery ? this.darkModeMediaQuery.matches : false;\n      this.uppy.log(`[Dashboard] Dark mode is ${isDarkModeOnFromTheStart ? 'on' : 'off'}`);\n      this.setDarkModeCapability(isDarkModeOnFromTheStart);\n      if (this.opts.theme === 'auto') {\n        var _this$darkModeMediaQu;\n        (_this$darkModeMediaQu = this.darkModeMediaQuery) == null || _this$darkModeMediaQu.addListener(this.handleSystemDarkModeChange);\n      }\n      _classPrivateFieldLooseBase(this, _addSpecifiedPluginsFromOptions)[_addSpecifiedPluginsFromOptions]();\n      _classPrivateFieldLooseBase(this, _autoDiscoverPlugins)[_autoDiscoverPlugins]();\n      this.initEvents();\n    };\n    this.uninstall = () => {\n      if (!this.opts.disableInformer) {\n        const informer = this.uppy.getPlugin(`${this.id}:Informer`);\n        // Checking if this plugin exists, in case it was removed by uppy-core\n        // before the Dashboard was.\n        if (informer) this.uppy.removePlugin(informer);\n      }\n      if (!this.opts.disableStatusBar) {\n        const statusBar = this.uppy.getPlugin(`${this.id}:StatusBar`);\n        if (statusBar) this.uppy.removePlugin(statusBar);\n      }\n      if (!this.opts.disableThumbnailGenerator) {\n        const thumbnail = this.uppy.getPlugin(`${this.id}:ThumbnailGenerator`);\n        if (thumbnail) this.uppy.removePlugin(thumbnail);\n      }\n      const plugins = this.opts.plugins || [];\n      plugins.forEach(pluginID => {\n        const plugin = this.uppy.getPlugin(pluginID);\n        if (plugin) plugin.unmount();\n      });\n      if (this.opts.theme === 'auto') {\n        var _this$darkModeMediaQu2;\n        (_this$darkModeMediaQu2 = this.darkModeMediaQuery) == null || _this$darkModeMediaQu2.removeListener(this.handleSystemDarkModeChange);\n      }\n      if (this.opts.disablePageScrollWhenModalOpen) {\n        document.body.classList.remove('uppy-Dashboard-isFixed');\n      }\n      this.unmount();\n      this.removeEvents();\n    };\n    this.id = this.opts.id || 'Dashboard';\n    this.title = 'Dashboard';\n    this.type = 'orchestrator';\n    this.defaultLocale = locale;\n\n    // Dynamic default options:\n    (_this$opts4$doneButto = (_this$opts4 = this.opts).doneButtonHandler) != null ? _this$opts4$doneButto : _this$opts4.doneButtonHandler = () => {\n      this.uppy.clearUploadedFiles();\n      this.requestCloseModal();\n    };\n    (_this$opts5$onRequest = (_this$opts5 = this.opts).onRequestCloseModal) != null ? _this$opts5$onRequest : _this$opts5.onRequestCloseModal = () => this.closeModal();\n    this.i18nInit();\n  }\n}\nDashboard.VERSION = packageJson.version;","map":{"version":3,"names":["_classPrivateFieldLooseBase","receiver","privateKey","Object","prototype","hasOwnProperty","call","TypeError","id","_classPrivateFieldLooseKey","name","UIPlugin","StatusBar","Informer","ThumbnailGenerator","findAllDOMElements","toArray","getDroppedFiles","defaultPickerIcon","nanoid","memoizeOne","trapFocus","createSuperFocus","DashboardUI","packageJson","locale","memoize","default","TAB_KEY","ESC_KEY","createPromise","o","promise","Promise","resolve","reject","defaultOptions","target","metaFields","inline","width","height","thumbnailWidth","thumbnailType","waitForThumbnailsBeforeUpload","showLinkToFileUploadResult","showProgressDetails","hideUploadButton","hideCancelButton","hideRetryButton","hidePauseResumeButton","hideProgressAfterFinish","note","closeModalOnClickOutside","closeAfterFinish","singleFileFullScreen","disableStatusBar","disableInformer","disableThumbnailGenerator","disablePageScrollWhenModalOpen","animateOpenClose","fileManagerSelectionType","proudlyDisplayPoweredByUppy","showSelectedFiles","showRemoveButtonAfterComplete","browserBackButtonClose","showNativePhotoCameraButton","showNativeVideoCameraButton","theme","autoOpen","autoOpenFileEditor","disabled","disableLocalFiles","doneButtonHandler","onRequestCloseModal","_disabledNodes","_generateLargeThumbnailIfSingleFile","_openFileEditorWhenFilesAdded","_attachRenderFunctionToTarget","_isTargetSupported","_getAcquirers","_getProgressIndicators","_getEditors","_addSpecifiedPluginsFromOptions","_autoDiscoverPlugins","_addSupportedPluginIfNoTarget","Dashboard","constructor","uppy","_opts","_this$opts4","_this$opts4$doneButto","_this$opts5","_this$opts5$onRequest","undefined","defineProperty","writable","value","modalName","superFocus","ifFocusedOnUppyRecently","removeTarget","plugin","pluginState","getPluginState","newTargets","targets","filter","setPluginState","addTarget","callerPluginId","callerPluginName","title","callerPluginType","type","msg","log","state","slice","push","el","hideAllPanels","_state$activePickerPa","update","activePickerPanel","showAddFilesPanel","activeOverlayType","fileCardFor","showFileEditor","emit","showPanel","find","canEditFile","file","editors","some","getPlugin","openFileEditor","forEach","editor","selectFile","closeFileEditor","isMetaEditorEnabled","length","saveFileEditor","save","openModal","savedScrollPosition","window","pageYOffset","savedActiveElement","document","activeElement","opts","body","classList","add","isClosing","handler","isHidden","removeEventListener","addEventListener","updateBrowserHistory","handleKeyDownInModal","closeModal","_opts$manualClose","manualClose","remove","cancel","focus","_history$state","history","back","isModalOpen","requestCloseModal","setDarkModeCapability","isDarkModeOn","capabilities","getState","setState","darkMode","handleSystemDarkModeChange","event","isDarkModeOnNow","matches","toggleFileCard","show","fileID","getFile","toggleAddFilesPanel","addFiles","files","descriptors","map","source","data","meta","relativePath","webkitRelativePath","err","startListeningToResize","resizeObserver","ResizeObserver","entries","uppyDashboardInnerEl","contentRect","containerWidth","containerHeight","areInsidesReadyToBeVisible","observe","querySelector","makeDashboardInsidesVisibleAnywayTimeout","setTimeout","isModalAndClosed","stopListeningToResize","disconnect","clearTimeout","recordIfFocusedOnUppyRecently","contains","disableInteractiveElements","disable","_classPrivateFieldLoo","NODES_TO_DISABLE","nodesToDisable","querySelectorAll","node","tagName","setAttribute","dashboardIsDisabled","_history$state2","pushState","handlePopState","_event$state","keyCode","forModal","handleClickOutside","handlePaste","iteratePlugins","handleRootPaste","clipboardData","handleInputChange","preventDefault","handleDragOver","_this$opts$onDragOver","_this$opts","stopPropagation","canSomePluginHandleRootDrop","somePluginCanHandleRootDrop","canHandleRootDrop","doesEventHaveFiles","types","dataTransfer","hasFiles","allowNewUpload","dropEffect","removeDragOverClassTimeout","isDraggingOver","onDragOver","handleDragLeave","_this$opts$onDragLeav","_this$opts2","onDragLeave","handleDrop","_this$opts$onDrop","_this$opts3","handleRootDrop","executedDropErrorOnce","logDropError","error","info","message","onDrop","handleRequestThumbnail","handleCancelThumbnail","handleKeyDownInInline","forInline","handlePasteOnBody","isFocusInOverlay","handleComplete","_ref","failed","handleCancelRestore","LARGE_THUMBNAIL","getFiles","thumbnailGenerator","setOptions","fileForThumbnail","preview","requestThumbnail","then","firstFile","isImageEditorEnabled","initEvents","trigger","showModalTrigger","on","removeEvents","off","superFocusOnEachUpdate","isFocusInUppy","isFocusNowhere","isInformerHidden","isModal","afterUpdate","saveFileCard","setFileMeta","icon","render","isSupported","newFiles","uploadStartedFiles","completeFiles","erroredFiles","inProgressFiles","inProgressNotPausedFiles","processingFiles","isUploadStarted","isAllComplete","isAllErrored","isAllPaused","getObjectOfFilesPerState","acquirers","progressindicators","indexOf","console","warn","totalFileCount","keys","totalProgress","direction","autoProceed","i18n","i18nArray","recoveredState","resumableUploads","individualCancellation","isMobileDevice","isTargetDOMEl","parentElement","allowedFileTypes","restrictions","maxNumberOfFiles","requiredMetaFields","nativeCameraFacingMode","plugins","pluginID","mount","_plugin$opts","typesAllowed","includes","pluginAlreadyAdded","installedPlugin","install","Error","allowMultipleUploads","allowMultipleUploadBatches","use","hideAfterFinish","thumbnailHeight","lazy","darkModeMediaQuery","matchMedia","isDarkModeOnFromTheStart","_this$darkModeMediaQu","addListener","uninstall","informer","removePlugin","statusBar","thumbnail","unmount","_this$darkModeMediaQu2","removeListener","defaultLocale","clearUploadedFiles","i18nInit","VERSION","version"],"sources":["/home/nainar/Documents/reactProjects/userAuthentiCator/registeration-login/node_modules/@uppy/dashboard/lib/Dashboard.js"],"sourcesContent":["function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError(\"attempted to use private field on non-instance\"); } return receiver; }\nvar id = 0;\nfunction _classPrivateFieldLooseKey(name) { return \"__private_\" + id++ + \"_\" + name; }\nimport { UIPlugin } from '@uppy/core';\nimport StatusBar from '@uppy/status-bar';\nimport Informer from '@uppy/informer';\nimport ThumbnailGenerator from '@uppy/thumbnail-generator';\nimport findAllDOMElements from '@uppy/utils/lib/findAllDOMElements';\nimport toArray from '@uppy/utils/lib/toArray';\nimport getDroppedFiles from '@uppy/utils/lib/getDroppedFiles';\nimport { defaultPickerIcon } from '@uppy/provider-views';\nimport { nanoid } from 'nanoid/non-secure';\nimport memoizeOne from 'memoize-one';\nimport * as trapFocus from \"./utils/trapFocus.js\";\nimport createSuperFocus from \"./utils/createSuperFocus.js\";\nimport DashboardUI from \"./components/Dashboard.js\";\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\nconst packageJson = {\n  \"version\": \"3.8.0\"\n};\nimport locale from \"./locale.js\";\nconst memoize = memoizeOne.default || memoizeOne;\nconst TAB_KEY = 9;\nconst ESC_KEY = 27;\nfunction createPromise() {\n  const o = {};\n  o.promise = new Promise((resolve, reject) => {\n    o.resolve = resolve;\n    o.reject = reject;\n  });\n  return o;\n}\n// set default options, must be kept in sync with packages/@uppy/react/src/DashboardModal.js\nconst defaultOptions = {\n  target: 'body',\n  metaFields: [],\n  inline: false,\n  width: 750,\n  height: 550,\n  thumbnailWidth: 280,\n  thumbnailType: 'image/jpeg',\n  waitForThumbnailsBeforeUpload: false,\n  defaultPickerIcon,\n  showLinkToFileUploadResult: false,\n  showProgressDetails: false,\n  hideUploadButton: false,\n  hideCancelButton: false,\n  hideRetryButton: false,\n  hidePauseResumeButton: false,\n  hideProgressAfterFinish: false,\n  note: null,\n  closeModalOnClickOutside: false,\n  closeAfterFinish: false,\n  singleFileFullScreen: true,\n  disableStatusBar: false,\n  disableInformer: false,\n  disableThumbnailGenerator: false,\n  disablePageScrollWhenModalOpen: true,\n  animateOpenClose: true,\n  fileManagerSelectionType: 'files',\n  proudlyDisplayPoweredByUppy: true,\n  showSelectedFiles: true,\n  showRemoveButtonAfterComplete: false,\n  browserBackButtonClose: false,\n  showNativePhotoCameraButton: false,\n  showNativeVideoCameraButton: false,\n  theme: 'light',\n  autoOpen: null,\n  autoOpenFileEditor: false,\n  disabled: false,\n  disableLocalFiles: false,\n  // Dynamic default options, they have to be defined in the constructor (because\n  // they require access to the `this` keyword), but we still want them to\n  // appear in the default options so TS knows they'll be defined.\n  doneButtonHandler: null,\n  onRequestCloseModal: null\n};\n\n/**\n * Dashboard UI with previews, metadata editing, tabs for various services and more\n */\nvar _disabledNodes = /*#__PURE__*/_classPrivateFieldLooseKey(\"disabledNodes\");\nvar _generateLargeThumbnailIfSingleFile = /*#__PURE__*/_classPrivateFieldLooseKey(\"generateLargeThumbnailIfSingleFile\");\nvar _openFileEditorWhenFilesAdded = /*#__PURE__*/_classPrivateFieldLooseKey(\"openFileEditorWhenFilesAdded\");\nvar _attachRenderFunctionToTarget = /*#__PURE__*/_classPrivateFieldLooseKey(\"attachRenderFunctionToTarget\");\nvar _isTargetSupported = /*#__PURE__*/_classPrivateFieldLooseKey(\"isTargetSupported\");\nvar _getAcquirers = /*#__PURE__*/_classPrivateFieldLooseKey(\"getAcquirers\");\nvar _getProgressIndicators = /*#__PURE__*/_classPrivateFieldLooseKey(\"getProgressIndicators\");\nvar _getEditors = /*#__PURE__*/_classPrivateFieldLooseKey(\"getEditors\");\nvar _addSpecifiedPluginsFromOptions = /*#__PURE__*/_classPrivateFieldLooseKey(\"addSpecifiedPluginsFromOptions\");\nvar _autoDiscoverPlugins = /*#__PURE__*/_classPrivateFieldLooseKey(\"autoDiscoverPlugins\");\nvar _addSupportedPluginIfNoTarget = /*#__PURE__*/_classPrivateFieldLooseKey(\"addSupportedPluginIfNoTarget\");\nexport default class Dashboard extends UIPlugin {\n  // Timeouts\n\n  constructor(uppy, _opts) {\n    var _this$opts4, _this$opts4$doneButto, _this$opts5, _this$opts5$onRequest;\n    // support for the legacy `autoOpenFileEditor` option,\n    // TODO: we can remove this code when we update the Uppy major version\n    let autoOpen;\n    if (!_opts) {\n      autoOpen = null;\n    } else if (_opts.autoOpen === undefined) {\n      autoOpen = _opts.autoOpenFileEditor ? 'imageEditor' : null;\n    } else {\n      autoOpen = _opts.autoOpen;\n    }\n    super(uppy, {\n      ...defaultOptions,\n      ..._opts,\n      autoOpen\n    });\n    Object.defineProperty(this, _disabledNodes, {\n      writable: true,\n      value: void 0\n    });\n    this.modalName = `uppy-Dashboard-${nanoid()}`;\n    this.superFocus = createSuperFocus();\n    this.ifFocusedOnUppyRecently = false;\n    this.removeTarget = plugin => {\n      const pluginState = this.getPluginState();\n      // filter out the one we want to remove\n      const newTargets = pluginState.targets.filter(target => target.id !== plugin.id);\n      this.setPluginState({\n        targets: newTargets\n      });\n    };\n    this.addTarget = plugin => {\n      const callerPluginId = plugin.id || plugin.constructor.name;\n      const callerPluginName = plugin.title || callerPluginId;\n      const callerPluginType = plugin.type;\n      if (callerPluginType !== 'acquirer' && callerPluginType !== 'progressindicator' && callerPluginType !== 'editor') {\n        const msg = 'Dashboard: can only be targeted by plugins of types: acquirer, progressindicator, editor';\n        this.uppy.log(msg, 'error');\n        return null;\n      }\n      const target = {\n        id: callerPluginId,\n        name: callerPluginName,\n        type: callerPluginType\n      };\n      const state = this.getPluginState();\n      const newTargets = state.targets.slice();\n      newTargets.push(target);\n      this.setPluginState({\n        targets: newTargets\n      });\n      return this.el;\n    };\n    this.hideAllPanels = () => {\n      var _state$activePickerPa;\n      const state = this.getPluginState();\n      const update = {\n        activePickerPanel: undefined,\n        showAddFilesPanel: false,\n        activeOverlayType: null,\n        fileCardFor: null,\n        showFileEditor: false\n      };\n      if (state.activePickerPanel === update.activePickerPanel && state.showAddFilesPanel === update.showAddFilesPanel && state.showFileEditor === update.showFileEditor && state.activeOverlayType === update.activeOverlayType) {\n        // avoid doing a state update if nothing changed\n        return;\n      }\n      this.setPluginState(update);\n      this.uppy.emit('dashboard:close-panel', (_state$activePickerPa = state.activePickerPanel) == null ? void 0 : _state$activePickerPa.id);\n    };\n    this.showPanel = id => {\n      const {\n        targets\n      } = this.getPluginState();\n      const activePickerPanel = targets.find(target => {\n        return target.type === 'acquirer' && target.id === id;\n      });\n      this.setPluginState({\n        activePickerPanel,\n        activeOverlayType: 'PickerPanel'\n      });\n      this.uppy.emit('dashboard:show-panel', id);\n    };\n    this.canEditFile = file => {\n      const {\n        targets\n      } = this.getPluginState();\n      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](targets);\n      return editors.some(target => this.uppy.getPlugin(target.id).canEditFile(file));\n    };\n    this.openFileEditor = file => {\n      const {\n        targets\n      } = this.getPluginState();\n      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](targets);\n      this.setPluginState({\n        showFileEditor: true,\n        fileCardFor: file.id || null,\n        activeOverlayType: 'FileEditor'\n      });\n      editors.forEach(editor => {\n        ;\n        this.uppy.getPlugin(editor.id).selectFile(file);\n      });\n    };\n    this.closeFileEditor = () => {\n      const {\n        metaFields\n      } = this.getPluginState();\n      const isMetaEditorEnabled = metaFields && metaFields.length > 0;\n      if (isMetaEditorEnabled) {\n        this.setPluginState({\n          showFileEditor: false,\n          activeOverlayType: 'FileCard'\n        });\n      } else {\n        this.setPluginState({\n          showFileEditor: false,\n          fileCardFor: null,\n          activeOverlayType: 'AddFiles'\n        });\n      }\n    };\n    this.saveFileEditor = () => {\n      const {\n        targets\n      } = this.getPluginState();\n      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](targets);\n      editors.forEach(editor => {\n        ;\n        this.uppy.getPlugin(editor.id).save();\n      });\n      this.closeFileEditor();\n    };\n    this.openModal = () => {\n      const {\n        promise,\n        resolve\n      } = createPromise();\n      // save scroll position\n      this.savedScrollPosition = window.pageYOffset;\n      // save active element, so we can restore focus when modal is closed\n      this.savedActiveElement = document.activeElement;\n      if (this.opts.disablePageScrollWhenModalOpen) {\n        document.body.classList.add('uppy-Dashboard-isFixed');\n      }\n      if (this.opts.animateOpenClose && this.getPluginState().isClosing) {\n        const handler = () => {\n          this.setPluginState({\n            isHidden: false\n          });\n          this.el.removeEventListener('animationend', handler, false);\n          resolve();\n        };\n        this.el.addEventListener('animationend', handler, false);\n      } else {\n        this.setPluginState({\n          isHidden: false\n        });\n        resolve();\n      }\n      if (this.opts.browserBackButtonClose) {\n        this.updateBrowserHistory();\n      }\n\n      // handle ESC and TAB keys in modal dialog\n      document.addEventListener('keydown', this.handleKeyDownInModal);\n      this.uppy.emit('dashboard:modal-open');\n      return promise;\n    };\n    this.closeModal = opts => {\n      var _opts$manualClose;\n      // Whether the modal is being closed by the user (`true`) or by other means (e.g. browser back button)\n      const manualClose = (_opts$manualClose = opts == null ? void 0 : opts.manualClose) != null ? _opts$manualClose : true;\n      const {\n        isHidden,\n        isClosing\n      } = this.getPluginState();\n      if (isHidden || isClosing) {\n        // short-circuit if animation is ongoing\n        return undefined;\n      }\n      const {\n        promise,\n        resolve\n      } = createPromise();\n      if (this.opts.disablePageScrollWhenModalOpen) {\n        document.body.classList.remove('uppy-Dashboard-isFixed');\n      }\n      if (this.opts.animateOpenClose) {\n        this.setPluginState({\n          isClosing: true\n        });\n        const handler = () => {\n          this.setPluginState({\n            isHidden: true,\n            isClosing: false\n          });\n          this.superFocus.cancel();\n          this.savedActiveElement.focus();\n          this.el.removeEventListener('animationend', handler, false);\n          resolve();\n        };\n        this.el.addEventListener('animationend', handler, false);\n      } else {\n        this.setPluginState({\n          isHidden: true\n        });\n        this.superFocus.cancel();\n        this.savedActiveElement.focus();\n        resolve();\n      }\n\n      // handle ESC and TAB keys in modal dialog\n      document.removeEventListener('keydown', this.handleKeyDownInModal);\n      if (manualClose) {\n        if (this.opts.browserBackButtonClose) {\n          var _history$state;\n          // Make sure that the latest entry in the history state is our modal name\n          // eslint-disable-next-line no-restricted-globals\n          if ((_history$state = history.state) != null && _history$state[this.modalName]) {\n            // Go back in history to clear out the entry we created (ultimately closing the modal)\n            // eslint-disable-next-line no-restricted-globals\n            history.back();\n          }\n        }\n      }\n      this.uppy.emit('dashboard:modal-closed');\n      return promise;\n    };\n    this.isModalOpen = () => {\n      return !this.getPluginState().isHidden || false;\n    };\n    this.requestCloseModal = () => {\n      if (this.opts.onRequestCloseModal) {\n        return this.opts.onRequestCloseModal();\n      }\n      return this.closeModal();\n    };\n    this.setDarkModeCapability = isDarkModeOn => {\n      const {\n        capabilities\n      } = this.uppy.getState();\n      this.uppy.setState({\n        capabilities: {\n          ...capabilities,\n          darkMode: isDarkModeOn\n        }\n      });\n    };\n    this.handleSystemDarkModeChange = event => {\n      const isDarkModeOnNow = event.matches;\n      this.uppy.log(`[Dashboard] Dark mode is ${isDarkModeOnNow ? 'on' : 'off'}`);\n      this.setDarkModeCapability(isDarkModeOnNow);\n    };\n    this.toggleFileCard = (show, fileID) => {\n      const file = this.uppy.getFile(fileID);\n      if (show) {\n        this.uppy.emit('dashboard:file-edit-start', file);\n      } else {\n        this.uppy.emit('dashboard:file-edit-complete', file);\n      }\n      this.setPluginState({\n        fileCardFor: show ? fileID : null,\n        activeOverlayType: show ? 'FileCard' : null\n      });\n    };\n    this.toggleAddFilesPanel = show => {\n      this.setPluginState({\n        showAddFilesPanel: show,\n        activeOverlayType: show ? 'AddFiles' : null\n      });\n    };\n    this.addFiles = files => {\n      const descriptors = files.map(file => ({\n        source: this.id,\n        name: file.name,\n        type: file.type,\n        data: file,\n        meta: {\n          // path of the file relative to the ancestor directory the user selected.\n          // e.g. 'docs/Old Prague/airbnb.pdf'\n          relativePath: file.relativePath || file.webkitRelativePath || null\n        }\n      }));\n      try {\n        this.uppy.addFiles(descriptors);\n      } catch (err) {\n        this.uppy.log(err);\n      }\n    };\n    // ___Why make insides of Dashboard invisible until first ResizeObserver event is emitted?\n    //    ResizeOberserver doesn't emit the first resize event fast enough, users can see the jump from one .uppy-size-- to\n    //    another (e.g. in Safari)\n    // ___Why not apply visibility property to .uppy-Dashboard-inner?\n    //    Because ideally, acc to specs, ResizeObserver should see invisible elements as of width 0. So even though applying\n    //    invisibility to .uppy-Dashboard-inner works now, it may not work in the future.\n    this.startListeningToResize = () => {\n      // Watch for Dashboard container (`.uppy-Dashboard-inner`) resize\n      // and update containerWidth/containerHeight in plugin state accordingly.\n      // Emits first event on initialization.\n      this.resizeObserver = new ResizeObserver(entries => {\n        const uppyDashboardInnerEl = entries[0];\n        const {\n          width,\n          height\n        } = uppyDashboardInnerEl.contentRect;\n        this.setPluginState({\n          containerWidth: width,\n          containerHeight: height,\n          areInsidesReadyToBeVisible: true\n        });\n      });\n      this.resizeObserver.observe(this.el.querySelector('.uppy-Dashboard-inner'));\n\n      // If ResizeObserver fails to emit an event telling us what size to use - default to the mobile view\n      this.makeDashboardInsidesVisibleAnywayTimeout = setTimeout(() => {\n        const pluginState = this.getPluginState();\n        const isModalAndClosed = !this.opts.inline && pluginState.isHidden;\n        if (\n        // We might want to enable this in the future\n\n        // if ResizeObserver hasn't yet fired,\n        !pluginState.areInsidesReadyToBeVisible &&\n        // and it's not due to the modal being closed\n        !isModalAndClosed) {\n          this.uppy.log('[Dashboard] resize event didn’t fire on time: defaulted to mobile layout', 'warning');\n          this.setPluginState({\n            areInsidesReadyToBeVisible: true\n          });\n        }\n      }, 1000);\n    };\n    this.stopListeningToResize = () => {\n      this.resizeObserver.disconnect();\n      clearTimeout(this.makeDashboardInsidesVisibleAnywayTimeout);\n    };\n    // Records whether we have been interacting with uppy right now,\n    // which is then used to determine whether state updates should trigger a refocusing.\n    this.recordIfFocusedOnUppyRecently = event => {\n      if (this.el.contains(event.target)) {\n        this.ifFocusedOnUppyRecently = true;\n      } else {\n        this.ifFocusedOnUppyRecently = false;\n        // ___Why run this.superFocus.cancel here when it already runs in superFocusOnEachUpdate?\n        //    Because superFocus is debounced, when we move from Uppy to some other element on the page,\n        //    previously run superFocus sometimes hits and moves focus back to Uppy.\n        this.superFocus.cancel();\n      }\n    };\n    this.disableInteractiveElements = disable => {\n      var _classPrivateFieldLoo;\n      const NODES_TO_DISABLE = ['a[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', '[role=\"button\"]:not([disabled])'];\n      const nodesToDisable = (_classPrivateFieldLoo = _classPrivateFieldLooseBase(this, _disabledNodes)[_disabledNodes]) != null ? _classPrivateFieldLoo : toArray(this.el.querySelectorAll(NODES_TO_DISABLE)).filter(node => !node.classList.contains('uppy-Dashboard-close'));\n      for (const node of nodesToDisable) {\n        // Links can’t have `disabled` attr, so we use `aria-disabled` for a11y\n        if (node.tagName === 'A') {\n          node.setAttribute('aria-disabled', disable);\n        } else {\n          node.disabled = disable;\n        }\n      }\n      if (disable) {\n        _classPrivateFieldLooseBase(this, _disabledNodes)[_disabledNodes] = nodesToDisable;\n      } else {\n        _classPrivateFieldLooseBase(this, _disabledNodes)[_disabledNodes] = null;\n      }\n      this.dashboardIsDisabled = disable;\n    };\n    this.updateBrowserHistory = () => {\n      var _history$state2;\n      // Ensure history state does not already contain our modal name to avoid double-pushing\n      // eslint-disable-next-line no-restricted-globals\n      if (!((_history$state2 = history.state) != null && _history$state2[this.modalName])) {\n        // Push to history so that the page is not lost on browser back button press\n        // eslint-disable-next-line no-restricted-globals\n        history.pushState({\n          // eslint-disable-next-line no-restricted-globals\n          ...history.state,\n          [this.modalName]: true\n        }, '');\n      }\n\n      // Listen for back button presses\n      window.addEventListener('popstate', this.handlePopState, false);\n    };\n    this.handlePopState = event => {\n      var _event$state;\n      // Close the modal if the history state no longer contains our modal name\n      if (this.isModalOpen() && (!event.state || !event.state[this.modalName])) {\n        this.closeModal({\n          manualClose: false\n        });\n      }\n\n      // When the browser back button is pressed and uppy is now the latest entry\n      // in the history but the modal is closed, fix the history by removing the\n      // uppy history entry.\n      // This occurs when another entry is added into the history state while the\n      // modal is open, and then the modal gets manually closed.\n      // Solves PR #575 (https://github.com/transloadit/uppy/pull/575)\n      if (!this.isModalOpen() && (_event$state = event.state) != null && _event$state[this.modalName]) {\n        // eslint-disable-next-line no-restricted-globals\n        history.back();\n      }\n    };\n    this.handleKeyDownInModal = event => {\n      // close modal on esc key press\n      if (event.keyCode === ESC_KEY) this.requestCloseModal();\n      // trap focus on tab key press\n      if (event.keyCode === TAB_KEY) trapFocus.forModal(event, this.getPluginState().activeOverlayType, this.el);\n    };\n    this.handleClickOutside = () => {\n      if (this.opts.closeModalOnClickOutside) this.requestCloseModal();\n    };\n    this.handlePaste = event => {\n      // Let any acquirer plugin (Url/Webcam/etc.) handle pastes to the root\n      this.uppy.iteratePlugins(plugin => {\n        if (plugin.type === 'acquirer') {\n          // Every Plugin with .type acquirer can define handleRootPaste(event)\n          ;\n          plugin.handleRootPaste == null || plugin.handleRootPaste(event);\n        }\n      });\n\n      // Add all dropped files\n      const files = toArray(event.clipboardData.files);\n      if (files.length > 0) {\n        this.uppy.log('[Dashboard] Files pasted');\n        this.addFiles(files);\n      }\n    };\n    this.handleInputChange = event => {\n      event.preventDefault();\n      const files = toArray(event.target.files);\n      if (files.length > 0) {\n        this.uppy.log('[Dashboard] Files selected through input');\n        this.addFiles(files);\n      }\n    };\n    this.handleDragOver = event => {\n      var _this$opts$onDragOver, _this$opts;\n      event.preventDefault();\n      event.stopPropagation();\n\n      // Check if some plugin can handle the datatransfer without files —\n      // for instance, the Url plugin can import a url\n      const canSomePluginHandleRootDrop = () => {\n        let somePluginCanHandleRootDrop = true;\n        this.uppy.iteratePlugins(plugin => {\n          if (plugin.canHandleRootDrop != null && plugin.canHandleRootDrop(event)) {\n            somePluginCanHandleRootDrop = true;\n          }\n        });\n        return somePluginCanHandleRootDrop;\n      };\n\n      // Check if the \"type\" of the datatransfer object includes files\n      const doesEventHaveFiles = () => {\n        const {\n          types\n        } = event.dataTransfer;\n        return types.some(type => type === 'Files');\n      };\n\n      // Deny drop, if no plugins can handle datatransfer, there are no files,\n      // or when opts.disabled is set, or new uploads are not allowed\n      const somePluginCanHandleRootDrop = canSomePluginHandleRootDrop();\n      const hasFiles = doesEventHaveFiles();\n      if (!somePluginCanHandleRootDrop && !hasFiles || this.opts.disabled ||\n      // opts.disableLocalFiles should only be taken into account if no plugins\n      // can handle the datatransfer\n      this.opts.disableLocalFiles && (hasFiles || !somePluginCanHandleRootDrop) || !this.uppy.getState().allowNewUpload) {\n        event.dataTransfer.dropEffect = 'none'; // eslint-disable-line no-param-reassign\n        clearTimeout(this.removeDragOverClassTimeout);\n        return;\n      }\n\n      // Add a small (+) icon on drop\n      // (and prevent browsers from interpreting this as files being _moved_ into the\n      // browser, https://github.com/transloadit/uppy/issues/1978).\n      event.dataTransfer.dropEffect = 'copy'; // eslint-disable-line no-param-reassign\n\n      clearTimeout(this.removeDragOverClassTimeout);\n      this.setPluginState({\n        isDraggingOver: true\n      });\n      (_this$opts$onDragOver = (_this$opts = this.opts).onDragOver) == null || _this$opts$onDragOver.call(_this$opts, event);\n    };\n    this.handleDragLeave = event => {\n      var _this$opts$onDragLeav, _this$opts2;\n      event.preventDefault();\n      event.stopPropagation();\n      clearTimeout(this.removeDragOverClassTimeout);\n      // Timeout against flickering, this solution is taken from drag-drop library.\n      // Solution with 'pointer-events: none' didn't work across browsers.\n      this.removeDragOverClassTimeout = setTimeout(() => {\n        this.setPluginState({\n          isDraggingOver: false\n        });\n      }, 50);\n      (_this$opts$onDragLeav = (_this$opts2 = this.opts).onDragLeave) == null || _this$opts$onDragLeav.call(_this$opts2, event);\n    };\n    this.handleDrop = async event => {\n      var _this$opts$onDrop, _this$opts3;\n      event.preventDefault();\n      event.stopPropagation();\n      clearTimeout(this.removeDragOverClassTimeout);\n      this.setPluginState({\n        isDraggingOver: false\n      });\n\n      // Let any acquirer plugin (Url/Webcam/etc.) handle drops to the root\n      this.uppy.iteratePlugins(plugin => {\n        if (plugin.type === 'acquirer') {\n          // Every Plugin with .type acquirer can define handleRootDrop(event)\n          ;\n          plugin.handleRootDrop == null || plugin.handleRootDrop(event);\n        }\n      });\n\n      // Add all dropped files\n      let executedDropErrorOnce = false;\n      const logDropError = error => {\n        this.uppy.log(error, 'error');\n\n        // In practice all drop errors are most likely the same,\n        // so let's just show one to avoid overwhelming the user\n        if (!executedDropErrorOnce) {\n          this.uppy.info(error.message, 'error');\n          executedDropErrorOnce = true;\n        }\n      };\n      this.uppy.log('[Dashboard] Processing dropped files');\n\n      // Add all dropped files\n      const files = await getDroppedFiles(event.dataTransfer, {\n        logDropError\n      });\n      if (files.length > 0) {\n        this.uppy.log('[Dashboard] Files dropped');\n        this.addFiles(files);\n      }\n      (_this$opts$onDrop = (_this$opts3 = this.opts).onDrop) == null || _this$opts$onDrop.call(_this$opts3, event);\n    };\n    this.handleRequestThumbnail = file => {\n      if (!this.opts.waitForThumbnailsBeforeUpload) {\n        this.uppy.emit('thumbnail:request', file);\n      }\n    };\n    /**\n     * We cancel thumbnail requests when a file item component unmounts to avoid\n     * clogging up the queue when the user scrolls past many elements.\n     */\n    this.handleCancelThumbnail = file => {\n      if (!this.opts.waitForThumbnailsBeforeUpload) {\n        this.uppy.emit('thumbnail:cancel', file);\n      }\n    };\n    this.handleKeyDownInInline = event => {\n      // Trap focus on tab key press.\n      if (event.keyCode === TAB_KEY) trapFocus.forInline(event, this.getPluginState().activeOverlayType, this.el);\n    };\n    // ___Why do we listen to the 'paste' event on a document instead of onPaste={props.handlePaste} prop,\n    //    or this.el.addEventListener('paste')?\n    //    Because (at least) Chrome doesn't handle paste if focus is on some button, e.g. 'My Device'.\n    //    => Therefore, the best option is to listen to all 'paste' events, and only react to them when we are focused on our\n    //       particular Uppy instance.\n    // ___Why do we still need onPaste={props.handlePaste} for the DashboardUi?\n    //    Because if we click on the 'Drop files here' caption e.g., `document.activeElement` will be 'body'. Which means our\n    //    standard determination of whether we're pasting into our Uppy instance won't work.\n    //    => Therefore, we need a traditional onPaste={props.handlePaste} handler too.\n    this.handlePasteOnBody = event => {\n      const isFocusInOverlay = this.el.contains(document.activeElement);\n      if (isFocusInOverlay) {\n        this.handlePaste(event);\n      }\n    };\n    this.handleComplete = _ref => {\n      let {\n        failed\n      } = _ref;\n      if (this.opts.closeAfterFinish && !(failed != null && failed.length)) {\n        // All uploads are done\n        this.requestCloseModal();\n      }\n    };\n    this.handleCancelRestore = () => {\n      this.uppy.emit('restore-canceled');\n    };\n    Object.defineProperty(this, _generateLargeThumbnailIfSingleFile, {\n      writable: true,\n      value: () => {\n        if (this.opts.disableThumbnailGenerator) {\n          return;\n        }\n        const LARGE_THUMBNAIL = 600;\n        const files = this.uppy.getFiles();\n        if (files.length === 1) {\n          const thumbnailGenerator = this.uppy.getPlugin(`${this.id}:ThumbnailGenerator`);\n          thumbnailGenerator == null || thumbnailGenerator.setOptions({\n            thumbnailWidth: LARGE_THUMBNAIL\n          });\n          const fileForThumbnail = {\n            ...files[0],\n            preview: undefined\n          };\n          thumbnailGenerator == null || thumbnailGenerator.requestThumbnail(fileForThumbnail).then(() => {\n            thumbnailGenerator == null || thumbnailGenerator.setOptions({\n              thumbnailWidth: this.opts.thumbnailWidth\n            });\n          });\n        }\n      }\n    });\n    Object.defineProperty(this, _openFileEditorWhenFilesAdded, {\n      writable: true,\n      value: files => {\n        const firstFile = files[0];\n        const {\n          metaFields\n        } = this.getPluginState();\n        const isMetaEditorEnabled = metaFields && metaFields.length > 0;\n        const isImageEditorEnabled = this.canEditFile(firstFile);\n        if (isMetaEditorEnabled && this.opts.autoOpen === 'metaEditor') {\n          this.toggleFileCard(true, firstFile.id);\n        } else if (isImageEditorEnabled && this.opts.autoOpen === 'imageEditor') {\n          this.openFileEditor(firstFile);\n        }\n      }\n    });\n    this.initEvents = () => {\n      // Modal open button\n      if (this.opts.trigger && !this.opts.inline) {\n        const showModalTrigger = findAllDOMElements(this.opts.trigger);\n        if (showModalTrigger) {\n          showModalTrigger.forEach(trigger => trigger.addEventListener('click', this.openModal));\n        } else {\n          this.uppy.log('Dashboard modal trigger not found. Make sure `trigger` is set in Dashboard options, unless you are planning to call `dashboard.openModal()` method yourself', 'warning');\n        }\n      }\n      this.startListeningToResize();\n      document.addEventListener('paste', this.handlePasteOnBody);\n      this.uppy.on('plugin-added', _classPrivateFieldLooseBase(this, _addSupportedPluginIfNoTarget)[_addSupportedPluginIfNoTarget]);\n      this.uppy.on('plugin-remove', this.removeTarget);\n      this.uppy.on('file-added', this.hideAllPanels);\n      this.uppy.on('dashboard:modal-closed', this.hideAllPanels);\n      this.uppy.on('complete', this.handleComplete);\n      this.uppy.on('files-added', _classPrivateFieldLooseBase(this, _generateLargeThumbnailIfSingleFile)[_generateLargeThumbnailIfSingleFile]);\n      this.uppy.on('file-removed', _classPrivateFieldLooseBase(this, _generateLargeThumbnailIfSingleFile)[_generateLargeThumbnailIfSingleFile]);\n\n      // ___Why fire on capture?\n      //    Because this.ifFocusedOnUppyRecently needs to change before onUpdate() fires.\n      document.addEventListener('focus', this.recordIfFocusedOnUppyRecently, true);\n      document.addEventListener('click', this.recordIfFocusedOnUppyRecently, true);\n      if (this.opts.inline) {\n        this.el.addEventListener('keydown', this.handleKeyDownInInline);\n      }\n      if (this.opts.autoOpen) {\n        this.uppy.on('files-added', _classPrivateFieldLooseBase(this, _openFileEditorWhenFilesAdded)[_openFileEditorWhenFilesAdded]);\n      }\n    };\n    this.removeEvents = () => {\n      const showModalTrigger = findAllDOMElements(this.opts.trigger);\n      if (!this.opts.inline && showModalTrigger) {\n        showModalTrigger.forEach(trigger => trigger.removeEventListener('click', this.openModal));\n      }\n      this.stopListeningToResize();\n      document.removeEventListener('paste', this.handlePasteOnBody);\n      window.removeEventListener('popstate', this.handlePopState, false);\n      this.uppy.off('plugin-added', _classPrivateFieldLooseBase(this, _addSupportedPluginIfNoTarget)[_addSupportedPluginIfNoTarget]);\n      this.uppy.off('plugin-remove', this.removeTarget);\n      this.uppy.off('file-added', this.hideAllPanels);\n      this.uppy.off('dashboard:modal-closed', this.hideAllPanels);\n      this.uppy.off('complete', this.handleComplete);\n      this.uppy.off('files-added', _classPrivateFieldLooseBase(this, _generateLargeThumbnailIfSingleFile)[_generateLargeThumbnailIfSingleFile]);\n      this.uppy.off('file-removed', _classPrivateFieldLooseBase(this, _generateLargeThumbnailIfSingleFile)[_generateLargeThumbnailIfSingleFile]);\n      document.removeEventListener('focus', this.recordIfFocusedOnUppyRecently);\n      document.removeEventListener('click', this.recordIfFocusedOnUppyRecently);\n      if (this.opts.inline) {\n        this.el.removeEventListener('keydown', this.handleKeyDownInInline);\n      }\n      if (this.opts.autoOpen) {\n        this.uppy.off('files-added', _classPrivateFieldLooseBase(this, _openFileEditorWhenFilesAdded)[_openFileEditorWhenFilesAdded]);\n      }\n    };\n    this.superFocusOnEachUpdate = () => {\n      const isFocusInUppy = this.el.contains(document.activeElement);\n      // When focus is lost on the page (== focus is on body for most browsers, or focus is null for IE11)\n      const isFocusNowhere = document.activeElement === document.body || document.activeElement === null;\n      const isInformerHidden = this.uppy.getState().info.length === 0;\n      const isModal = !this.opts.inline;\n      if (\n      // If update is connected to showing the Informer - let the screen reader calmly read it.\n      isInformerHidden && (\n      // If we are in a modal - always superfocus without concern for other elements\n      // on the page (user is unlikely to want to interact with the rest of the page)\n      isModal ||\n      // If we are already inside of Uppy, or\n      isFocusInUppy ||\n      // If we are not focused on anything BUT we have already, at least once, focused on uppy\n      //   1. We focus when isFocusNowhere, because when the element we were focused\n      //      on disappears (e.g. an overlay), - focus gets lost. If user is typing\n      //      something somewhere else on the page, - focus won't be 'nowhere'.\n      //   2. We only focus when focus is nowhere AND this.ifFocusedOnUppyRecently,\n      //      to avoid focus jumps if we do something else on the page.\n      //   [Practical check] Without '&& this.ifFocusedOnUppyRecently', in Safari, in inline mode,\n      //                     when file is uploading, - navigate via tab to the checkbox,\n      //                     try to press space multiple times. Focus will jump to Uppy.\n      isFocusNowhere && this.ifFocusedOnUppyRecently)) {\n        this.superFocus(this.el, this.getPluginState().activeOverlayType);\n      } else {\n        this.superFocus.cancel();\n      }\n    };\n    this.afterUpdate = () => {\n      if (this.opts.disabled && !this.dashboardIsDisabled) {\n        this.disableInteractiveElements(true);\n        return;\n      }\n      if (!this.opts.disabled && this.dashboardIsDisabled) {\n        this.disableInteractiveElements(false);\n      }\n      this.superFocusOnEachUpdate();\n    };\n    this.saveFileCard = (meta, fileID) => {\n      this.uppy.setFileMeta(fileID, meta);\n      this.toggleFileCard(false, fileID);\n    };\n    Object.defineProperty(this, _attachRenderFunctionToTarget, {\n      writable: true,\n      value: target => {\n        const plugin = this.uppy.getPlugin(target.id);\n        return {\n          ...target,\n          icon: plugin.icon || this.opts.defaultPickerIcon,\n          render: plugin.render\n        };\n      }\n    });\n    Object.defineProperty(this, _isTargetSupported, {\n      writable: true,\n      value: target => {\n        const plugin = this.uppy.getPlugin(target.id);\n        // If the plugin does not provide a `supported` check, assume the plugin works everywhere.\n        if (typeof plugin.isSupported !== 'function') {\n          return true;\n        }\n        return plugin.isSupported();\n      }\n    });\n    Object.defineProperty(this, _getAcquirers, {\n      writable: true,\n      value: memoize(targets => {\n        return targets.filter(target => target.type === 'acquirer' && _classPrivateFieldLooseBase(this, _isTargetSupported)[_isTargetSupported](target)).map(_classPrivateFieldLooseBase(this, _attachRenderFunctionToTarget)[_attachRenderFunctionToTarget]);\n      })\n    });\n    Object.defineProperty(this, _getProgressIndicators, {\n      writable: true,\n      value: memoize(targets => {\n        return targets.filter(target => target.type === 'progressindicator').map(_classPrivateFieldLooseBase(this, _attachRenderFunctionToTarget)[_attachRenderFunctionToTarget]);\n      })\n    });\n    Object.defineProperty(this, _getEditors, {\n      writable: true,\n      value: memoize(targets => {\n        return targets.filter(target => target.type === 'editor').map(_classPrivateFieldLooseBase(this, _attachRenderFunctionToTarget)[_attachRenderFunctionToTarget]);\n      })\n    });\n    this.render = state => {\n      const pluginState = this.getPluginState();\n      const {\n        files,\n        capabilities,\n        allowNewUpload\n      } = state;\n      const {\n        newFiles,\n        uploadStartedFiles,\n        completeFiles,\n        erroredFiles,\n        inProgressFiles,\n        inProgressNotPausedFiles,\n        processingFiles,\n        isUploadStarted,\n        isAllComplete,\n        isAllErrored,\n        isAllPaused\n      } = this.uppy.getObjectOfFilesPerState();\n      const acquirers = _classPrivateFieldLooseBase(this, _getAcquirers)[_getAcquirers](pluginState.targets);\n      const progressindicators = _classPrivateFieldLooseBase(this, _getProgressIndicators)[_getProgressIndicators](pluginState.targets);\n      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](pluginState.targets);\n      let theme;\n      if (this.opts.theme === 'auto') {\n        theme = capabilities.darkMode ? 'dark' : 'light';\n      } else {\n        theme = this.opts.theme;\n      }\n      if (['files', 'folders', 'both'].indexOf(this.opts.fileManagerSelectionType) < 0) {\n        this.opts.fileManagerSelectionType = 'files';\n        // eslint-disable-next-line no-console\n        console.warn(`Unsupported option for \"fileManagerSelectionType\". Using default of \"${this.opts.fileManagerSelectionType}\".`);\n      }\n      return DashboardUI({\n        state,\n        isHidden: pluginState.isHidden,\n        files,\n        newFiles,\n        uploadStartedFiles,\n        completeFiles,\n        erroredFiles,\n        inProgressFiles,\n        inProgressNotPausedFiles,\n        processingFiles,\n        isUploadStarted,\n        isAllComplete,\n        isAllErrored,\n        isAllPaused,\n        totalFileCount: Object.keys(files).length,\n        totalProgress: state.totalProgress,\n        allowNewUpload,\n        acquirers,\n        theme,\n        disabled: this.opts.disabled,\n        disableLocalFiles: this.opts.disableLocalFiles,\n        direction: this.opts.direction,\n        activePickerPanel: pluginState.activePickerPanel,\n        showFileEditor: pluginState.showFileEditor,\n        saveFileEditor: this.saveFileEditor,\n        closeFileEditor: this.closeFileEditor,\n        disableInteractiveElements: this.disableInteractiveElements,\n        animateOpenClose: this.opts.animateOpenClose,\n        isClosing: pluginState.isClosing,\n        progressindicators,\n        editors,\n        autoProceed: this.uppy.opts.autoProceed,\n        id: this.id,\n        closeModal: this.requestCloseModal,\n        handleClickOutside: this.handleClickOutside,\n        handleInputChange: this.handleInputChange,\n        handlePaste: this.handlePaste,\n        inline: this.opts.inline,\n        showPanel: this.showPanel,\n        hideAllPanels: this.hideAllPanels,\n        i18n: this.i18n,\n        i18nArray: this.i18nArray,\n        uppy: this.uppy,\n        note: this.opts.note,\n        recoveredState: state.recoveredState,\n        metaFields: pluginState.metaFields,\n        resumableUploads: capabilities.resumableUploads || false,\n        individualCancellation: capabilities.individualCancellation,\n        isMobileDevice: capabilities.isMobileDevice,\n        fileCardFor: pluginState.fileCardFor,\n        toggleFileCard: this.toggleFileCard,\n        toggleAddFilesPanel: this.toggleAddFilesPanel,\n        showAddFilesPanel: pluginState.showAddFilesPanel,\n        saveFileCard: this.saveFileCard,\n        openFileEditor: this.openFileEditor,\n        canEditFile: this.canEditFile,\n        width: this.opts.width,\n        height: this.opts.height,\n        showLinkToFileUploadResult: this.opts.showLinkToFileUploadResult,\n        fileManagerSelectionType: this.opts.fileManagerSelectionType,\n        proudlyDisplayPoweredByUppy: this.opts.proudlyDisplayPoweredByUppy,\n        hideCancelButton: this.opts.hideCancelButton,\n        hideRetryButton: this.opts.hideRetryButton,\n        hidePauseResumeButton: this.opts.hidePauseResumeButton,\n        showRemoveButtonAfterComplete: this.opts.showRemoveButtonAfterComplete,\n        containerWidth: pluginState.containerWidth,\n        containerHeight: pluginState.containerHeight,\n        areInsidesReadyToBeVisible: pluginState.areInsidesReadyToBeVisible,\n        isTargetDOMEl: this.isTargetDOMEl,\n        parentElement: this.el,\n        allowedFileTypes: this.uppy.opts.restrictions.allowedFileTypes,\n        maxNumberOfFiles: this.uppy.opts.restrictions.maxNumberOfFiles,\n        requiredMetaFields: this.uppy.opts.restrictions.requiredMetaFields,\n        showSelectedFiles: this.opts.showSelectedFiles,\n        showNativePhotoCameraButton: this.opts.showNativePhotoCameraButton,\n        showNativeVideoCameraButton: this.opts.showNativeVideoCameraButton,\n        nativeCameraFacingMode: this.opts.nativeCameraFacingMode,\n        singleFileFullScreen: this.opts.singleFileFullScreen,\n        handleCancelRestore: this.handleCancelRestore,\n        handleRequestThumbnail: this.handleRequestThumbnail,\n        handleCancelThumbnail: this.handleCancelThumbnail,\n        // drag props\n        isDraggingOver: pluginState.isDraggingOver,\n        handleDragOver: this.handleDragOver,\n        handleDragLeave: this.handleDragLeave,\n        handleDrop: this.handleDrop\n      });\n    };\n    Object.defineProperty(this, _addSpecifiedPluginsFromOptions, {\n      writable: true,\n      value: () => {\n        const plugins = this.opts.plugins || [];\n        plugins.forEach(pluginID => {\n          const plugin = this.uppy.getPlugin(pluginID);\n          if (plugin) {\n            ;\n            plugin.mount(this, plugin);\n          } else {\n            this.uppy.log(`[Uppy] Dashboard could not find plugin '${pluginID}', make sure to uppy.use() the plugins you are specifying`, 'warning');\n          }\n        });\n      }\n    });\n    Object.defineProperty(this, _autoDiscoverPlugins, {\n      writable: true,\n      value: () => {\n        this.uppy.iteratePlugins(_classPrivateFieldLooseBase(this, _addSupportedPluginIfNoTarget)[_addSupportedPluginIfNoTarget]);\n      }\n    });\n    Object.defineProperty(this, _addSupportedPluginIfNoTarget, {\n      writable: true,\n      value: plugin => {\n        var _plugin$opts;\n        // Only these types belong on the Dashboard,\n        // we wouldn’t want to try and mount Compressor or Tus, for example.\n        const typesAllowed = ['acquirer', 'editor'];\n        if (plugin && !((_plugin$opts = plugin.opts) != null && _plugin$opts.target) && typesAllowed.includes(plugin.type)) {\n          const pluginAlreadyAdded = this.getPluginState().targets.some(installedPlugin => plugin.id === installedPlugin.id);\n          if (!pluginAlreadyAdded) {\n            ;\n            plugin.mount(this, plugin);\n          }\n        }\n      }\n    });\n    this.install = () => {\n      // Set default state for Dashboard\n      this.setPluginState({\n        isHidden: true,\n        fileCardFor: null,\n        activeOverlayType: null,\n        showAddFilesPanel: false,\n        activePickerPanel: undefined,\n        showFileEditor: false,\n        metaFields: this.opts.metaFields,\n        targets: [],\n        // We'll make them visible once .containerWidth is determined\n        areInsidesReadyToBeVisible: false,\n        isDraggingOver: false\n      });\n      const {\n        inline,\n        closeAfterFinish\n      } = this.opts;\n      if (inline && closeAfterFinish) {\n        throw new Error('[Dashboard] `closeAfterFinish: true` cannot be used on an inline Dashboard, because an inline Dashboard cannot be closed at all. Either set `inline: false`, or disable the `closeAfterFinish` option.');\n      }\n      const {\n        allowMultipleUploads,\n        allowMultipleUploadBatches\n      } = this.uppy.opts;\n      if ((allowMultipleUploads || allowMultipleUploadBatches) && closeAfterFinish) {\n        this.uppy.log('[Dashboard] When using `closeAfterFinish`, we recommended setting the `allowMultipleUploadBatches` option to `false` in the Uppy constructor. See https://uppy.io/docs/uppy/#allowMultipleUploads-true', 'warning');\n      }\n      const {\n        target\n      } = this.opts;\n      if (target) {\n        this.mount(target, this);\n      }\n      if (!this.opts.disableStatusBar) {\n        this.uppy.use(StatusBar, {\n          id: `${this.id}:StatusBar`,\n          target: this,\n          hideUploadButton: this.opts.hideUploadButton,\n          hideRetryButton: this.opts.hideRetryButton,\n          hidePauseResumeButton: this.opts.hidePauseResumeButton,\n          hideCancelButton: this.opts.hideCancelButton,\n          showProgressDetails: this.opts.showProgressDetails,\n          hideAfterFinish: this.opts.hideProgressAfterFinish,\n          locale: this.opts.locale,\n          doneButtonHandler: this.opts.doneButtonHandler\n        });\n      }\n      if (!this.opts.disableInformer) {\n        this.uppy.use(Informer, {\n          id: `${this.id}:Informer`,\n          target: this\n        });\n      }\n      if (!this.opts.disableThumbnailGenerator) {\n        this.uppy.use(ThumbnailGenerator, {\n          id: `${this.id}:ThumbnailGenerator`,\n          thumbnailWidth: this.opts.thumbnailWidth,\n          thumbnailHeight: this.opts.thumbnailHeight,\n          thumbnailType: this.opts.thumbnailType,\n          waitForThumbnailsBeforeUpload: this.opts.waitForThumbnailsBeforeUpload,\n          // If we don't block on thumbnails, we can lazily generate them\n          lazy: !this.opts.waitForThumbnailsBeforeUpload\n        });\n      }\n\n      // Dark Mode / theme\n      this.darkModeMediaQuery = typeof window !== 'undefined' && window.matchMedia ? window.matchMedia('(prefers-color-scheme: dark)') : null;\n      const isDarkModeOnFromTheStart = this.darkModeMediaQuery ? this.darkModeMediaQuery.matches : false;\n      this.uppy.log(`[Dashboard] Dark mode is ${isDarkModeOnFromTheStart ? 'on' : 'off'}`);\n      this.setDarkModeCapability(isDarkModeOnFromTheStart);\n      if (this.opts.theme === 'auto') {\n        var _this$darkModeMediaQu;\n        (_this$darkModeMediaQu = this.darkModeMediaQuery) == null || _this$darkModeMediaQu.addListener(this.handleSystemDarkModeChange);\n      }\n      _classPrivateFieldLooseBase(this, _addSpecifiedPluginsFromOptions)[_addSpecifiedPluginsFromOptions]();\n      _classPrivateFieldLooseBase(this, _autoDiscoverPlugins)[_autoDiscoverPlugins]();\n      this.initEvents();\n    };\n    this.uninstall = () => {\n      if (!this.opts.disableInformer) {\n        const informer = this.uppy.getPlugin(`${this.id}:Informer`);\n        // Checking if this plugin exists, in case it was removed by uppy-core\n        // before the Dashboard was.\n        if (informer) this.uppy.removePlugin(informer);\n      }\n      if (!this.opts.disableStatusBar) {\n        const statusBar = this.uppy.getPlugin(`${this.id}:StatusBar`);\n        if (statusBar) this.uppy.removePlugin(statusBar);\n      }\n      if (!this.opts.disableThumbnailGenerator) {\n        const thumbnail = this.uppy.getPlugin(`${this.id}:ThumbnailGenerator`);\n        if (thumbnail) this.uppy.removePlugin(thumbnail);\n      }\n      const plugins = this.opts.plugins || [];\n      plugins.forEach(pluginID => {\n        const plugin = this.uppy.getPlugin(pluginID);\n        if (plugin) plugin.unmount();\n      });\n      if (this.opts.theme === 'auto') {\n        var _this$darkModeMediaQu2;\n        (_this$darkModeMediaQu2 = this.darkModeMediaQuery) == null || _this$darkModeMediaQu2.removeListener(this.handleSystemDarkModeChange);\n      }\n      if (this.opts.disablePageScrollWhenModalOpen) {\n        document.body.classList.remove('uppy-Dashboard-isFixed');\n      }\n      this.unmount();\n      this.removeEvents();\n    };\n    this.id = this.opts.id || 'Dashboard';\n    this.title = 'Dashboard';\n    this.type = 'orchestrator';\n    this.defaultLocale = locale;\n\n    // Dynamic default options:\n    (_this$opts4$doneButto = (_this$opts4 = this.opts).doneButtonHandler) != null ? _this$opts4$doneButto : _this$opts4.doneButtonHandler = () => {\n      this.uppy.clearUploadedFiles();\n      this.requestCloseModal();\n    };\n    (_this$opts5$onRequest = (_this$opts5 = this.opts).onRequestCloseModal) != null ? _this$opts5$onRequest : _this$opts5.onRequestCloseModal = () => this.closeModal();\n    this.i18nInit();\n  }\n}\nDashboard.VERSION = packageJson.version;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}