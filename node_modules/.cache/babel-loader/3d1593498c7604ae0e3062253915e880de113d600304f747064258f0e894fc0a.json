{"ast":null,"code":"function _classPrivateFieldLooseBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n  return receiver;\n}\nvar id = 0;\nfunction _classPrivateFieldLooseKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}\nimport BasePlugin from '@uppy/core/lib/BasePlugin.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport EventManager from '@uppy/core/lib/EventManager.js';\nimport ProgressTimeout from '@uppy/utils/lib/ProgressTimeout';\nimport { RateLimitedQueue, internalRateLimitedQueue\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore untyped\n} from '@uppy/utils/lib/RateLimitedQueue';\nimport NetworkError from '@uppy/utils/lib/NetworkError';\nimport isNetworkError from '@uppy/utils/lib/isNetworkError';\nimport { filterNonFailedFiles, filterFilesToEmitUploadStarted } from '@uppy/utils/lib/fileFilters';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\nconst packageJson = {\n  \"version\": \"3.6.4\"\n};\nimport locale from \"./locale.js\";\nfunction buildResponseError(xhr, err) {\n  let error = err;\n  // No error message\n  if (!error) error = new Error('Upload error');\n  // Got an error message string\n  if (typeof error === 'string') error = new Error(error);\n  // Got something else\n  if (!(error instanceof Error)) {\n    error = Object.assign(new Error('Upload error'), {\n      data: error\n    });\n  }\n  if (isNetworkError(xhr)) {\n    error = new NetworkError(error, xhr);\n    return error;\n  }\n\n  // @ts-expect-error request can only be set on NetworkError\n  // but we use NetworkError to distinguish between errors.\n  error.request = xhr;\n  return error;\n}\n\n/**\n * Set `data.type` in the blob to `file.meta.type`,\n * because we might have detected a more accurate file type in Uppy\n * https://stackoverflow.com/a/50875615\n */\nfunction setTypeInBlob(file) {\n  const dataWithUpdatedType = file.data.slice(0, file.data.size, file.meta.type);\n  return dataWithUpdatedType;\n}\nconst defaultOptions = {\n  formData: true,\n  fieldName: 'file',\n  method: 'post',\n  allowedMetaFields: null,\n  responseUrlFieldName: 'url',\n  bundle: false,\n  headers: {},\n  timeout: 30 * 1000,\n  limit: 5,\n  withCredentials: false,\n  responseType: '',\n  getResponseData(responseText) {\n    let parsedResponse = {};\n    try {\n      parsedResponse = JSON.parse(responseText);\n    } catch {\n      // ignore\n    }\n    // We don't have access to the B (Body) generic here\n    // so we have to cast it to any. The user facing types\n    // remain correct, this is only to please the merging of default options.\n    return parsedResponse;\n  },\n  getResponseError(_, response) {\n    let error = new Error('Upload error');\n    if (isNetworkError(response)) {\n      error = new NetworkError(error, response);\n    }\n    return error;\n  },\n  validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n};\nvar _uploadLocalFile = /*#__PURE__*/_classPrivateFieldLooseKey(\"uploadLocalFile\");\nvar _uploadBundle = /*#__PURE__*/_classPrivateFieldLooseKey(\"uploadBundle\");\nvar _getCompanionClientArgs = /*#__PURE__*/_classPrivateFieldLooseKey(\"getCompanionClientArgs\");\nvar _uploadFiles = /*#__PURE__*/_classPrivateFieldLooseKey(\"uploadFiles\");\nvar _handleUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"handleUpload\");\nexport default class XHRUpload extends BasePlugin {\n  constructor(uppy, _opts) {\n    super(uppy, {\n      ...defaultOptions,\n      fieldName: _opts.bundle ? 'files[]' : 'file',\n      ..._opts\n    });\n    Object.defineProperty(this, _uploadFiles, {\n      value: _uploadFiles2\n    });\n    Object.defineProperty(this, _getCompanionClientArgs, {\n      value: _getCompanionClientArgs2\n    });\n    Object.defineProperty(this, _uploadBundle, {\n      value: _uploadBundle2\n    });\n    Object.defineProperty(this, _uploadLocalFile, {\n      value: _uploadLocalFile2\n    });\n    Object.defineProperty(this, _handleUpload, {\n      writable: true,\n      value: async fileIDs => {\n        if (fileIDs.length === 0) {\n          this.uppy.log('[XHRUpload] No files to upload!');\n          return;\n        }\n\n        // No limit configured by the user, and no RateLimitedQueue passed in by a \"parent\" plugin\n        // (basically just AwsS3) using the internal symbol\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore untyped internal\n        if (this.opts.limit === 0 && !this.opts[internalRateLimitedQueue]) {\n          this.uppy.log('[XHRUpload] When uploading multiple files at once, consider setting the `limit` option (to `10` for example), to limit the number of concurrent uploads, which helps prevent memory and network issues: https://uppy.io/docs/xhr-upload/#limit-0', 'warning');\n        }\n        this.uppy.log('[XHRUpload] Uploading...');\n        const files = this.uppy.getFilesByIds(fileIDs);\n        const filesFiltered = filterNonFailedFiles(files);\n        const filesToEmit = filterFilesToEmitUploadStarted(filesFiltered);\n        this.uppy.emit('upload-start', filesToEmit);\n        if (this.opts.bundle) {\n          // if bundle: true, we don’t support remote uploads\n          const isSomeFileRemote = filesFiltered.some(file => file.isRemote);\n          if (isSomeFileRemote) {\n            throw new Error('Can’t upload remote files when the `bundle: true` option is set');\n          }\n          if (typeof this.opts.headers === 'function') {\n            throw new TypeError('`headers` may not be a function when the `bundle: true` option is set');\n          }\n          await _classPrivateFieldLooseBase(this, _uploadBundle)[_uploadBundle](filesFiltered);\n        } else {\n          await _classPrivateFieldLooseBase(this, _uploadFiles)[_uploadFiles](filesFiltered);\n        }\n      }\n    });\n    this.type = 'uploader';\n    this.id = this.opts.id || 'XHRUpload';\n    this.defaultLocale = locale;\n    this.i18nInit();\n\n    // Simultaneous upload limiting is shared across all uploads with this plugin.\n    if (internalRateLimitedQueue in this.opts) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore untyped internal\n      this.requests = this.opts[internalRateLimitedQueue];\n    } else {\n      this.requests = new RateLimitedQueue(this.opts.limit);\n    }\n    if (this.opts.bundle && !this.opts.formData) {\n      throw new Error('`opts.formData` must be true when `opts.bundle` is enabled.');\n    }\n    if (this.opts.bundle && typeof this.opts.headers === 'function') {\n      throw new Error('`opts.headers` can not be a function when the `bundle: true` option is set.');\n    }\n    if ((_opts == null ? void 0 : _opts.allowedMetaFields) === undefined && 'metaFields' in this.opts) {\n      throw new Error('The `metaFields` option has been renamed to `allowedMetaFields`.');\n    }\n    this.uploaderEvents = Object.create(null);\n  }\n  getOptions(file) {\n    const overrides = this.uppy.getState().xhrUpload;\n    const {\n      headers\n    } = this.opts;\n    const opts = {\n      ...this.opts,\n      ...(overrides || {}),\n      ...(file.xhrUpload || {}),\n      headers: {}\n    };\n    // Support for `headers` as a function, only in the XHRUpload settings.\n    // Options set by other plugins in Uppy state or on the files themselves are still merged in afterward.\n    //\n    // ```js\n    // headers: (file) => ({ expires: file.meta.expires })\n    // ```\n    if (typeof headers === 'function') {\n      opts.headers = headers(file);\n    } else {\n      Object.assign(opts.headers, this.opts.headers);\n    }\n    if (overrides) {\n      Object.assign(opts.headers, overrides.headers);\n    }\n    if (file.xhrUpload) {\n      Object.assign(opts.headers, file.xhrUpload.headers);\n    }\n    return opts;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  addMetadata(formData, meta, opts) {\n    const allowedMetaFields = Array.isArray(opts.allowedMetaFields) ? opts.allowedMetaFields : Object.keys(meta); // Send along all fields by default.\n\n    allowedMetaFields.forEach(item => {\n      const value = meta[item];\n      if (Array.isArray(value)) {\n        // In this case we don't transform `item` to add brackets, it's up to\n        // the user to add the brackets so it won't be overridden.\n        value.forEach(subItem => formData.append(item, subItem));\n      } else {\n        formData.append(item, value);\n      }\n    });\n  }\n  createFormDataUpload(file, opts) {\n    const formPost = new FormData();\n    this.addMetadata(formPost, file.meta, opts);\n    const dataWithUpdatedType = setTypeInBlob(file);\n    if (file.name) {\n      formPost.append(opts.fieldName, dataWithUpdatedType, file.meta.name);\n    } else {\n      formPost.append(opts.fieldName, dataWithUpdatedType);\n    }\n    return formPost;\n  }\n  createBundledUpload(files, opts) {\n    const formPost = new FormData();\n    const {\n      meta\n    } = this.uppy.getState();\n    this.addMetadata(formPost, meta, opts);\n    files.forEach(file => {\n      const options = this.getOptions(file);\n      const dataWithUpdatedType = setTypeInBlob(file);\n      if (file.name) {\n        formPost.append(options.fieldName, dataWithUpdatedType, file.name);\n      } else {\n        formPost.append(options.fieldName, dataWithUpdatedType);\n      }\n    });\n    return formPost;\n  }\n  install() {\n    if (this.opts.bundle) {\n      const {\n        capabilities\n      } = this.uppy.getState();\n      this.uppy.setState({\n        capabilities: {\n          ...capabilities,\n          individualCancellation: false\n        }\n      });\n    }\n    this.uppy.addUploader(_classPrivateFieldLooseBase(this, _handleUpload)[_handleUpload]);\n  }\n  uninstall() {\n    if (this.opts.bundle) {\n      const {\n        capabilities\n      } = this.uppy.getState();\n      this.uppy.setState({\n        capabilities: {\n          ...capabilities,\n          individualCancellation: true\n        }\n      });\n    }\n    this.uppy.removeUploader(_classPrivateFieldLooseBase(this, _handleUpload)[_handleUpload]);\n  }\n}\nasync function _uploadLocalFile2(file, current, total) {\n  const opts = this.getOptions(file);\n  const uploadStarted = Date.now();\n  this.uppy.log(`uploading ${current} of ${total}`);\n  return new Promise((resolve, reject) => {\n    const data = opts.formData ? this.createFormDataUpload(file, opts) : file.data;\n    const xhr = new XMLHttpRequest();\n    const eventManager = new EventManager(this.uppy);\n    this.uploaderEvents[file.id] = eventManager;\n    let queuedRequest;\n    const timer = new ProgressTimeout(opts.timeout, () => {\n      const error = new Error(this.i18n('uploadStalled', {\n        seconds: Math.ceil(opts.timeout / 1000)\n      }));\n      this.uppy.emit('upload-stalled', error, [file]);\n    });\n    const id = nanoid();\n    xhr.upload.addEventListener('loadstart', () => {\n      this.uppy.log(`[XHRUpload] ${id} started`);\n    });\n    xhr.upload.addEventListener('progress', ev => {\n      this.uppy.log(`[XHRUpload] ${id} progress: ${ev.loaded} / ${ev.total}`);\n      // Begin checking for timeouts when progress starts, instead of loading,\n      // to avoid timing out requests on browser concurrency queue\n      timer.progress();\n      if (ev.lengthComputable) {\n        this.uppy.emit('upload-progress', this.uppy.getFile(file.id), {\n          // TODO: do not send `uploader` in next major\n          // @ts-expect-error we can't type this and we should remove it\n          uploader: this,\n          uploadStarted,\n          bytesUploaded: ev.loaded,\n          bytesTotal: ev.total\n        });\n      }\n    });\n    xhr.addEventListener('load', () => {\n      this.uppy.log(`[XHRUpload] ${id} finished`);\n      timer.done();\n      queuedRequest.done();\n      if (this.uploaderEvents[file.id]) {\n        this.uploaderEvents[file.id].remove();\n        this.uploaderEvents[file.id] = null;\n      }\n      if (opts.validateStatus(xhr.status, xhr.responseText, xhr)) {\n        const body = opts.getResponseData(xhr.responseText, xhr);\n        const uploadURL = body == null ? void 0 : body[opts.responseUrlFieldName];\n        const uploadResp = {\n          status: xhr.status,\n          body,\n          uploadURL\n        };\n        this.uppy.emit('upload-success', this.uppy.getFile(file.id), uploadResp);\n        if (uploadURL) {\n          this.uppy.log(`Download ${file.name} from ${uploadURL}`);\n        }\n        return resolve(file);\n      }\n      const body = opts.getResponseData(xhr.responseText, xhr);\n      const error = buildResponseError(xhr, opts.getResponseError(xhr.responseText, xhr));\n      const response = {\n        status: xhr.status,\n        body\n      };\n      this.uppy.emit('upload-error', file, error, response);\n      return reject(error);\n    });\n    xhr.addEventListener('error', () => {\n      this.uppy.log(`[XHRUpload] ${id} errored`);\n      timer.done();\n      queuedRequest.done();\n      if (this.uploaderEvents[file.id]) {\n        this.uploaderEvents[file.id].remove();\n        this.uploaderEvents[file.id] = null;\n      }\n      const error = buildResponseError(xhr, opts.getResponseError(xhr.responseText, xhr));\n      this.uppy.emit('upload-error', file, error);\n      return reject(error);\n    });\n    xhr.open(opts.method.toUpperCase(), opts.endpoint, true);\n    // IE10 does not allow setting `withCredentials` and `responseType`\n    // before `open()` is called.\n    xhr.withCredentials = opts.withCredentials;\n    if (opts.responseType !== '') {\n      xhr.responseType = opts.responseType;\n    }\n    queuedRequest = this.requests.run(() => {\n      // When using an authentication system like JWT, the bearer token goes as a header. This\n      // header needs to be fresh each time the token is refreshed so computing and setting the\n      // headers just before the upload starts enables this kind of authentication to work properly.\n      // Otherwise, half-way through the list of uploads the token could be stale and the upload would fail.\n      const currentOpts = this.getOptions(file);\n      Object.keys(currentOpts.headers).forEach(header => {\n        xhr.setRequestHeader(header, currentOpts.headers[header]);\n      });\n      xhr.send(data);\n      return () => {\n        timer.done();\n        xhr.abort();\n      };\n    });\n    eventManager.onFileRemove(file.id, () => {\n      queuedRequest.abort();\n      reject(new Error('File removed'));\n    });\n    eventManager.onCancelAll(file.id, _ref => {\n      let {\n        reason\n      } = _ref;\n      if (reason === 'user') {\n        queuedRequest.abort();\n      }\n      reject(new Error('Upload cancelled'));\n    });\n  });\n}\nfunction _uploadBundle2(files) {\n  return new Promise((resolve, reject) => {\n    const {\n      endpoint\n    } = this.opts;\n    const {\n      method\n    } = this.opts;\n    const uploadStarted = Date.now();\n    const optsFromState = this.uppy.getState().xhrUpload;\n    const formData = this.createBundledUpload(files, {\n      ...this.opts,\n      ...(optsFromState || {})\n    });\n    const xhr = new XMLHttpRequest();\n    const emitError = error => {\n      files.forEach(file => {\n        this.uppy.emit('upload-error', file, error);\n      });\n    };\n    const timer = new ProgressTimeout(this.opts.timeout, () => {\n      const error = new Error(this.i18n('uploadStalled', {\n        seconds: Math.ceil(this.opts.timeout / 1000)\n      }));\n      this.uppy.emit('upload-stalled', error, files);\n    });\n    xhr.upload.addEventListener('loadstart', () => {\n      this.uppy.log('[XHRUpload] started uploading bundle');\n      timer.progress();\n    });\n    xhr.upload.addEventListener('progress', ev => {\n      timer.progress();\n      if (!ev.lengthComputable) return;\n      files.forEach(file => {\n        this.uppy.emit('upload-progress', this.uppy.getFile(file.id), {\n          // TODO: do not send `uploader` in next major\n          // @ts-expect-error we can't type this and we should remove it\n          uploader: this,\n          uploadStarted,\n          bytesUploaded: ev.loaded / ev.total * file.size,\n          bytesTotal: file.size\n        });\n      });\n    });\n    xhr.addEventListener('load', () => {\n      timer.done();\n      if (this.opts.validateStatus(xhr.status, xhr.responseText, xhr)) {\n        const body = this.opts.getResponseData(xhr.responseText, xhr);\n        const uploadResp = {\n          status: xhr.status,\n          body\n        };\n        files.forEach(file => {\n          this.uppy.emit('upload-success', this.uppy.getFile(file.id), uploadResp);\n        });\n        return resolve();\n      }\n      const error = this.opts.getResponseError(xhr.responseText, xhr) || new NetworkError('Upload error', xhr);\n      emitError(error);\n      return reject(error);\n    });\n    xhr.addEventListener('error', () => {\n      timer.done();\n      const error = this.opts.getResponseError(xhr.responseText, xhr) || new Error('Upload error');\n      emitError(error);\n      return reject(error);\n    });\n    this.uppy.on('cancel-all', function (_temp) {\n      let {\n        reason\n      } = _temp === void 0 ? {} : _temp;\n      if (reason !== 'user') return;\n      timer.done();\n      xhr.abort();\n    });\n    xhr.open(method.toUpperCase(), endpoint, true);\n    // IE10 does not allow setting `withCredentials` and `responseType`\n    // before `open()` is called.\n    xhr.withCredentials = this.opts.withCredentials;\n    if (this.opts.responseType !== '') {\n      xhr.responseType = this.opts.responseType;\n    }\n\n    // In bundle mode headers can not be a function\n    const headers = this.opts.headers;\n    Object.keys(headers).forEach(header => {\n      xhr.setRequestHeader(header, headers[header]);\n    });\n    xhr.send(formData);\n  });\n}\nfunction _getCompanionClientArgs2(file) {\n  var _file$remote;\n  const opts = this.getOptions(file);\n  const allowedMetaFields = Array.isArray(opts.allowedMetaFields) ? opts.allowedMetaFields\n  // Send along all fields by default.\n  : Object.keys(file.meta);\n  return {\n    ...((_file$remote = file.remote) == null ? void 0 : _file$remote.body),\n    protocol: 'multipart',\n    endpoint: opts.endpoint,\n    size: file.data.size,\n    fieldname: opts.fieldName,\n    metadata: Object.fromEntries(allowedMetaFields.map(name => [name, file.meta[name]])),\n    httpMethod: opts.method,\n    useFormData: opts.formData,\n    headers: opts.headers\n  };\n}\nasync function _uploadFiles2(files) {\n  await Promise.allSettled(files.map((file, i) => {\n    const current = i + 1;\n    const total = files.length;\n    if (file.isRemote) {\n      const getQueue = () => this.requests;\n      const controller = new AbortController();\n      const removedHandler = removedFile => {\n        if (removedFile.id === file.id) controller.abort();\n      };\n      this.uppy.on('file-removed', removedHandler);\n      const uploadPromise = this.uppy.getRequestClientForFile(file).uploadRemoteFile(file, _classPrivateFieldLooseBase(this, _getCompanionClientArgs)[_getCompanionClientArgs](file), {\n        signal: controller.signal,\n        getQueue\n      });\n      this.requests.wrapSyncFunction(() => {\n        this.uppy.off('file-removed', removedHandler);\n      }, {\n        priority: -1\n      })();\n      return uploadPromise;\n    }\n    return _classPrivateFieldLooseBase(this, _uploadLocalFile)[_uploadLocalFile](file, current, total);\n  }));\n}\n// eslint-disable-next-line global-require\nXHRUpload.VERSION = packageJson.version;","map":{"version":3,"names":["_classPrivateFieldLooseBase","receiver","privateKey","Object","prototype","hasOwnProperty","call","TypeError","id","_classPrivateFieldLooseKey","name","BasePlugin","nanoid","EventManager","ProgressTimeout","RateLimitedQueue","internalRateLimitedQueue","NetworkError","isNetworkError","filterNonFailedFiles","filterFilesToEmitUploadStarted","packageJson","locale","buildResponseError","xhr","err","error","Error","assign","data","request","setTypeInBlob","file","dataWithUpdatedType","slice","size","meta","type","defaultOptions","formData","fieldName","method","allowedMetaFields","responseUrlFieldName","bundle","headers","timeout","limit","withCredentials","responseType","getResponseData","responseText","parsedResponse","JSON","parse","getResponseError","_","response","validateStatus","status","_uploadLocalFile","_uploadBundle","_getCompanionClientArgs","_uploadFiles","_handleUpload","XHRUpload","constructor","uppy","_opts","defineProperty","value","_uploadFiles2","_getCompanionClientArgs2","_uploadBundle2","_uploadLocalFile2","writable","fileIDs","length","log","opts","files","getFilesByIds","filesFiltered","filesToEmit","emit","isSomeFileRemote","some","isRemote","defaultLocale","i18nInit","requests","undefined","uploaderEvents","create","getOptions","overrides","getState","xhrUpload","addMetadata","Array","isArray","keys","forEach","item","subItem","append","createFormDataUpload","formPost","FormData","createBundledUpload","options","install","capabilities","setState","individualCancellation","addUploader","uninstall","removeUploader","current","total","uploadStarted","Date","now","Promise","resolve","reject","XMLHttpRequest","eventManager","queuedRequest","timer","i18n","seconds","Math","ceil","upload","addEventListener","ev","loaded","progress","lengthComputable","getFile","uploader","bytesUploaded","bytesTotal","done","remove","body","uploadURL","uploadResp","open","toUpperCase","endpoint","run","currentOpts","header","setRequestHeader","send","abort","onFileRemove","onCancelAll","_ref","reason","optsFromState","emitError","on","_temp","_file$remote","remote","protocol","fieldname","metadata","fromEntries","map","httpMethod","useFormData","allSettled","i","getQueue","controller","AbortController","removedHandler","removedFile","uploadPromise","getRequestClientForFile","uploadRemoteFile","signal","wrapSyncFunction","off","priority","VERSION","version"],"sources":["/home/nainar/Documents/reactProjects/userAuthentiCator/registeration-login/node_modules/@uppy/xhr-upload/lib/index.js"],"sourcesContent":["function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError(\"attempted to use private field on non-instance\"); } return receiver; }\nvar id = 0;\nfunction _classPrivateFieldLooseKey(name) { return \"__private_\" + id++ + \"_\" + name; }\nimport BasePlugin from '@uppy/core/lib/BasePlugin.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport EventManager from '@uppy/core/lib/EventManager.js';\nimport ProgressTimeout from '@uppy/utils/lib/ProgressTimeout';\nimport { RateLimitedQueue, internalRateLimitedQueue\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore untyped\n} from '@uppy/utils/lib/RateLimitedQueue';\nimport NetworkError from '@uppy/utils/lib/NetworkError';\nimport isNetworkError from '@uppy/utils/lib/isNetworkError';\nimport { filterNonFailedFiles, filterFilesToEmitUploadStarted } from '@uppy/utils/lib/fileFilters';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\nconst packageJson = {\n  \"version\": \"3.6.4\"\n};\nimport locale from \"./locale.js\";\nfunction buildResponseError(xhr, err) {\n  let error = err;\n  // No error message\n  if (!error) error = new Error('Upload error');\n  // Got an error message string\n  if (typeof error === 'string') error = new Error(error);\n  // Got something else\n  if (!(error instanceof Error)) {\n    error = Object.assign(new Error('Upload error'), {\n      data: error\n    });\n  }\n  if (isNetworkError(xhr)) {\n    error = new NetworkError(error, xhr);\n    return error;\n  }\n\n  // @ts-expect-error request can only be set on NetworkError\n  // but we use NetworkError to distinguish between errors.\n  error.request = xhr;\n  return error;\n}\n\n/**\n * Set `data.type` in the blob to `file.meta.type`,\n * because we might have detected a more accurate file type in Uppy\n * https://stackoverflow.com/a/50875615\n */\nfunction setTypeInBlob(file) {\n  const dataWithUpdatedType = file.data.slice(0, file.data.size, file.meta.type);\n  return dataWithUpdatedType;\n}\nconst defaultOptions = {\n  formData: true,\n  fieldName: 'file',\n  method: 'post',\n  allowedMetaFields: null,\n  responseUrlFieldName: 'url',\n  bundle: false,\n  headers: {},\n  timeout: 30 * 1000,\n  limit: 5,\n  withCredentials: false,\n  responseType: '',\n  getResponseData(responseText) {\n    let parsedResponse = {};\n    try {\n      parsedResponse = JSON.parse(responseText);\n    } catch {\n      // ignore\n    }\n    // We don't have access to the B (Body) generic here\n    // so we have to cast it to any. The user facing types\n    // remain correct, this is only to please the merging of default options.\n    return parsedResponse;\n  },\n  getResponseError(_, response) {\n    let error = new Error('Upload error');\n    if (isNetworkError(response)) {\n      error = new NetworkError(error, response);\n    }\n    return error;\n  },\n  validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n};\nvar _uploadLocalFile = /*#__PURE__*/_classPrivateFieldLooseKey(\"uploadLocalFile\");\nvar _uploadBundle = /*#__PURE__*/_classPrivateFieldLooseKey(\"uploadBundle\");\nvar _getCompanionClientArgs = /*#__PURE__*/_classPrivateFieldLooseKey(\"getCompanionClientArgs\");\nvar _uploadFiles = /*#__PURE__*/_classPrivateFieldLooseKey(\"uploadFiles\");\nvar _handleUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"handleUpload\");\nexport default class XHRUpload extends BasePlugin {\n  constructor(uppy, _opts) {\n    super(uppy, {\n      ...defaultOptions,\n      fieldName: _opts.bundle ? 'files[]' : 'file',\n      ..._opts\n    });\n    Object.defineProperty(this, _uploadFiles, {\n      value: _uploadFiles2\n    });\n    Object.defineProperty(this, _getCompanionClientArgs, {\n      value: _getCompanionClientArgs2\n    });\n    Object.defineProperty(this, _uploadBundle, {\n      value: _uploadBundle2\n    });\n    Object.defineProperty(this, _uploadLocalFile, {\n      value: _uploadLocalFile2\n    });\n    Object.defineProperty(this, _handleUpload, {\n      writable: true,\n      value: async fileIDs => {\n        if (fileIDs.length === 0) {\n          this.uppy.log('[XHRUpload] No files to upload!');\n          return;\n        }\n\n        // No limit configured by the user, and no RateLimitedQueue passed in by a \"parent\" plugin\n        // (basically just AwsS3) using the internal symbol\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore untyped internal\n        if (this.opts.limit === 0 && !this.opts[internalRateLimitedQueue]) {\n          this.uppy.log('[XHRUpload] When uploading multiple files at once, consider setting the `limit` option (to `10` for example), to limit the number of concurrent uploads, which helps prevent memory and network issues: https://uppy.io/docs/xhr-upload/#limit-0', 'warning');\n        }\n        this.uppy.log('[XHRUpload] Uploading...');\n        const files = this.uppy.getFilesByIds(fileIDs);\n        const filesFiltered = filterNonFailedFiles(files);\n        const filesToEmit = filterFilesToEmitUploadStarted(filesFiltered);\n        this.uppy.emit('upload-start', filesToEmit);\n        if (this.opts.bundle) {\n          // if bundle: true, we don’t support remote uploads\n          const isSomeFileRemote = filesFiltered.some(file => file.isRemote);\n          if (isSomeFileRemote) {\n            throw new Error('Can’t upload remote files when the `bundle: true` option is set');\n          }\n          if (typeof this.opts.headers === 'function') {\n            throw new TypeError('`headers` may not be a function when the `bundle: true` option is set');\n          }\n          await _classPrivateFieldLooseBase(this, _uploadBundle)[_uploadBundle](filesFiltered);\n        } else {\n          await _classPrivateFieldLooseBase(this, _uploadFiles)[_uploadFiles](filesFiltered);\n        }\n      }\n    });\n    this.type = 'uploader';\n    this.id = this.opts.id || 'XHRUpload';\n    this.defaultLocale = locale;\n    this.i18nInit();\n\n    // Simultaneous upload limiting is shared across all uploads with this plugin.\n    if (internalRateLimitedQueue in this.opts) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore untyped internal\n      this.requests = this.opts[internalRateLimitedQueue];\n    } else {\n      this.requests = new RateLimitedQueue(this.opts.limit);\n    }\n    if (this.opts.bundle && !this.opts.formData) {\n      throw new Error('`opts.formData` must be true when `opts.bundle` is enabled.');\n    }\n    if (this.opts.bundle && typeof this.opts.headers === 'function') {\n      throw new Error('`opts.headers` can not be a function when the `bundle: true` option is set.');\n    }\n    if ((_opts == null ? void 0 : _opts.allowedMetaFields) === undefined && 'metaFields' in this.opts) {\n      throw new Error('The `metaFields` option has been renamed to `allowedMetaFields`.');\n    }\n    this.uploaderEvents = Object.create(null);\n  }\n  getOptions(file) {\n    const overrides = this.uppy.getState().xhrUpload;\n    const {\n      headers\n    } = this.opts;\n    const opts = {\n      ...this.opts,\n      ...(overrides || {}),\n      ...(file.xhrUpload || {}),\n      headers: {}\n    };\n    // Support for `headers` as a function, only in the XHRUpload settings.\n    // Options set by other plugins in Uppy state or on the files themselves are still merged in afterward.\n    //\n    // ```js\n    // headers: (file) => ({ expires: file.meta.expires })\n    // ```\n    if (typeof headers === 'function') {\n      opts.headers = headers(file);\n    } else {\n      Object.assign(opts.headers, this.opts.headers);\n    }\n    if (overrides) {\n      Object.assign(opts.headers, overrides.headers);\n    }\n    if (file.xhrUpload) {\n      Object.assign(opts.headers, file.xhrUpload.headers);\n    }\n    return opts;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  addMetadata(formData, meta, opts) {\n    const allowedMetaFields = Array.isArray(opts.allowedMetaFields) ? opts.allowedMetaFields : Object.keys(meta); // Send along all fields by default.\n\n    allowedMetaFields.forEach(item => {\n      const value = meta[item];\n      if (Array.isArray(value)) {\n        // In this case we don't transform `item` to add brackets, it's up to\n        // the user to add the brackets so it won't be overridden.\n        value.forEach(subItem => formData.append(item, subItem));\n      } else {\n        formData.append(item, value);\n      }\n    });\n  }\n  createFormDataUpload(file, opts) {\n    const formPost = new FormData();\n    this.addMetadata(formPost, file.meta, opts);\n    const dataWithUpdatedType = setTypeInBlob(file);\n    if (file.name) {\n      formPost.append(opts.fieldName, dataWithUpdatedType, file.meta.name);\n    } else {\n      formPost.append(opts.fieldName, dataWithUpdatedType);\n    }\n    return formPost;\n  }\n  createBundledUpload(files, opts) {\n    const formPost = new FormData();\n    const {\n      meta\n    } = this.uppy.getState();\n    this.addMetadata(formPost, meta, opts);\n    files.forEach(file => {\n      const options = this.getOptions(file);\n      const dataWithUpdatedType = setTypeInBlob(file);\n      if (file.name) {\n        formPost.append(options.fieldName, dataWithUpdatedType, file.name);\n      } else {\n        formPost.append(options.fieldName, dataWithUpdatedType);\n      }\n    });\n    return formPost;\n  }\n  install() {\n    if (this.opts.bundle) {\n      const {\n        capabilities\n      } = this.uppy.getState();\n      this.uppy.setState({\n        capabilities: {\n          ...capabilities,\n          individualCancellation: false\n        }\n      });\n    }\n    this.uppy.addUploader(_classPrivateFieldLooseBase(this, _handleUpload)[_handleUpload]);\n  }\n  uninstall() {\n    if (this.opts.bundle) {\n      const {\n        capabilities\n      } = this.uppy.getState();\n      this.uppy.setState({\n        capabilities: {\n          ...capabilities,\n          individualCancellation: true\n        }\n      });\n    }\n    this.uppy.removeUploader(_classPrivateFieldLooseBase(this, _handleUpload)[_handleUpload]);\n  }\n}\nasync function _uploadLocalFile2(file, current, total) {\n  const opts = this.getOptions(file);\n  const uploadStarted = Date.now();\n  this.uppy.log(`uploading ${current} of ${total}`);\n  return new Promise((resolve, reject) => {\n    const data = opts.formData ? this.createFormDataUpload(file, opts) : file.data;\n    const xhr = new XMLHttpRequest();\n    const eventManager = new EventManager(this.uppy);\n    this.uploaderEvents[file.id] = eventManager;\n    let queuedRequest;\n    const timer = new ProgressTimeout(opts.timeout, () => {\n      const error = new Error(this.i18n('uploadStalled', {\n        seconds: Math.ceil(opts.timeout / 1000)\n      }));\n      this.uppy.emit('upload-stalled', error, [file]);\n    });\n    const id = nanoid();\n    xhr.upload.addEventListener('loadstart', () => {\n      this.uppy.log(`[XHRUpload] ${id} started`);\n    });\n    xhr.upload.addEventListener('progress', ev => {\n      this.uppy.log(`[XHRUpload] ${id} progress: ${ev.loaded} / ${ev.total}`);\n      // Begin checking for timeouts when progress starts, instead of loading,\n      // to avoid timing out requests on browser concurrency queue\n      timer.progress();\n      if (ev.lengthComputable) {\n        this.uppy.emit('upload-progress', this.uppy.getFile(file.id), {\n          // TODO: do not send `uploader` in next major\n          // @ts-expect-error we can't type this and we should remove it\n          uploader: this,\n          uploadStarted,\n          bytesUploaded: ev.loaded,\n          bytesTotal: ev.total\n        });\n      }\n    });\n    xhr.addEventListener('load', () => {\n      this.uppy.log(`[XHRUpload] ${id} finished`);\n      timer.done();\n      queuedRequest.done();\n      if (this.uploaderEvents[file.id]) {\n        this.uploaderEvents[file.id].remove();\n        this.uploaderEvents[file.id] = null;\n      }\n      if (opts.validateStatus(xhr.status, xhr.responseText, xhr)) {\n        const body = opts.getResponseData(xhr.responseText, xhr);\n        const uploadURL = body == null ? void 0 : body[opts.responseUrlFieldName];\n        const uploadResp = {\n          status: xhr.status,\n          body,\n          uploadURL\n        };\n        this.uppy.emit('upload-success', this.uppy.getFile(file.id), uploadResp);\n        if (uploadURL) {\n          this.uppy.log(`Download ${file.name} from ${uploadURL}`);\n        }\n        return resolve(file);\n      }\n      const body = opts.getResponseData(xhr.responseText, xhr);\n      const error = buildResponseError(xhr, opts.getResponseError(xhr.responseText, xhr));\n      const response = {\n        status: xhr.status,\n        body\n      };\n      this.uppy.emit('upload-error', file, error, response);\n      return reject(error);\n    });\n    xhr.addEventListener('error', () => {\n      this.uppy.log(`[XHRUpload] ${id} errored`);\n      timer.done();\n      queuedRequest.done();\n      if (this.uploaderEvents[file.id]) {\n        this.uploaderEvents[file.id].remove();\n        this.uploaderEvents[file.id] = null;\n      }\n      const error = buildResponseError(xhr, opts.getResponseError(xhr.responseText, xhr));\n      this.uppy.emit('upload-error', file, error);\n      return reject(error);\n    });\n    xhr.open(opts.method.toUpperCase(), opts.endpoint, true);\n    // IE10 does not allow setting `withCredentials` and `responseType`\n    // before `open()` is called.\n    xhr.withCredentials = opts.withCredentials;\n    if (opts.responseType !== '') {\n      xhr.responseType = opts.responseType;\n    }\n    queuedRequest = this.requests.run(() => {\n      // When using an authentication system like JWT, the bearer token goes as a header. This\n      // header needs to be fresh each time the token is refreshed so computing and setting the\n      // headers just before the upload starts enables this kind of authentication to work properly.\n      // Otherwise, half-way through the list of uploads the token could be stale and the upload would fail.\n      const currentOpts = this.getOptions(file);\n      Object.keys(currentOpts.headers).forEach(header => {\n        xhr.setRequestHeader(header, currentOpts.headers[header]);\n      });\n      xhr.send(data);\n      return () => {\n        timer.done();\n        xhr.abort();\n      };\n    });\n    eventManager.onFileRemove(file.id, () => {\n      queuedRequest.abort();\n      reject(new Error('File removed'));\n    });\n    eventManager.onCancelAll(file.id, _ref => {\n      let {\n        reason\n      } = _ref;\n      if (reason === 'user') {\n        queuedRequest.abort();\n      }\n      reject(new Error('Upload cancelled'));\n    });\n  });\n}\nfunction _uploadBundle2(files) {\n  return new Promise((resolve, reject) => {\n    const {\n      endpoint\n    } = this.opts;\n    const {\n      method\n    } = this.opts;\n    const uploadStarted = Date.now();\n    const optsFromState = this.uppy.getState().xhrUpload;\n    const formData = this.createBundledUpload(files, {\n      ...this.opts,\n      ...(optsFromState || {})\n    });\n    const xhr = new XMLHttpRequest();\n    const emitError = error => {\n      files.forEach(file => {\n        this.uppy.emit('upload-error', file, error);\n      });\n    };\n    const timer = new ProgressTimeout(this.opts.timeout, () => {\n      const error = new Error(this.i18n('uploadStalled', {\n        seconds: Math.ceil(this.opts.timeout / 1000)\n      }));\n      this.uppy.emit('upload-stalled', error, files);\n    });\n    xhr.upload.addEventListener('loadstart', () => {\n      this.uppy.log('[XHRUpload] started uploading bundle');\n      timer.progress();\n    });\n    xhr.upload.addEventListener('progress', ev => {\n      timer.progress();\n      if (!ev.lengthComputable) return;\n      files.forEach(file => {\n        this.uppy.emit('upload-progress', this.uppy.getFile(file.id), {\n          // TODO: do not send `uploader` in next major\n          // @ts-expect-error we can't type this and we should remove it\n          uploader: this,\n          uploadStarted,\n          bytesUploaded: ev.loaded / ev.total * file.size,\n          bytesTotal: file.size\n        });\n      });\n    });\n    xhr.addEventListener('load', () => {\n      timer.done();\n      if (this.opts.validateStatus(xhr.status, xhr.responseText, xhr)) {\n        const body = this.opts.getResponseData(xhr.responseText, xhr);\n        const uploadResp = {\n          status: xhr.status,\n          body\n        };\n        files.forEach(file => {\n          this.uppy.emit('upload-success', this.uppy.getFile(file.id), uploadResp);\n        });\n        return resolve();\n      }\n      const error = this.opts.getResponseError(xhr.responseText, xhr) || new NetworkError('Upload error', xhr);\n      emitError(error);\n      return reject(error);\n    });\n    xhr.addEventListener('error', () => {\n      timer.done();\n      const error = this.opts.getResponseError(xhr.responseText, xhr) || new Error('Upload error');\n      emitError(error);\n      return reject(error);\n    });\n    this.uppy.on('cancel-all', function (_temp) {\n      let {\n        reason\n      } = _temp === void 0 ? {} : _temp;\n      if (reason !== 'user') return;\n      timer.done();\n      xhr.abort();\n    });\n    xhr.open(method.toUpperCase(), endpoint, true);\n    // IE10 does not allow setting `withCredentials` and `responseType`\n    // before `open()` is called.\n    xhr.withCredentials = this.opts.withCredentials;\n    if (this.opts.responseType !== '') {\n      xhr.responseType = this.opts.responseType;\n    }\n\n    // In bundle mode headers can not be a function\n    const headers = this.opts.headers;\n    Object.keys(headers).forEach(header => {\n      xhr.setRequestHeader(header, headers[header]);\n    });\n    xhr.send(formData);\n  });\n}\nfunction _getCompanionClientArgs2(file) {\n  var _file$remote;\n  const opts = this.getOptions(file);\n  const allowedMetaFields = Array.isArray(opts.allowedMetaFields) ? opts.allowedMetaFields\n  // Send along all fields by default.\n  : Object.keys(file.meta);\n  return {\n    ...((_file$remote = file.remote) == null ? void 0 : _file$remote.body),\n    protocol: 'multipart',\n    endpoint: opts.endpoint,\n    size: file.data.size,\n    fieldname: opts.fieldName,\n    metadata: Object.fromEntries(allowedMetaFields.map(name => [name, file.meta[name]])),\n    httpMethod: opts.method,\n    useFormData: opts.formData,\n    headers: opts.headers\n  };\n}\nasync function _uploadFiles2(files) {\n  await Promise.allSettled(files.map((file, i) => {\n    const current = i + 1;\n    const total = files.length;\n    if (file.isRemote) {\n      const getQueue = () => this.requests;\n      const controller = new AbortController();\n      const removedHandler = removedFile => {\n        if (removedFile.id === file.id) controller.abort();\n      };\n      this.uppy.on('file-removed', removedHandler);\n      const uploadPromise = this.uppy.getRequestClientForFile(file).uploadRemoteFile(file, _classPrivateFieldLooseBase(this, _getCompanionClientArgs)[_getCompanionClientArgs](file), {\n        signal: controller.signal,\n        getQueue\n      });\n      this.requests.wrapSyncFunction(() => {\n        this.uppy.off('file-removed', removedHandler);\n      }, {\n        priority: -1\n      })();\n      return uploadPromise;\n    }\n    return _classPrivateFieldLooseBase(this, _uploadLocalFile)[_uploadLocalFile](file, current, total);\n  }));\n}\n// eslint-disable-next-line global-require\nXHRUpload.VERSION = packageJson.version;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}