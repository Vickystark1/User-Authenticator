{"ast":null,"code":"import { UIPlugin } from '@uppy/core';\nimport toArray from '@uppy/utils/lib/toArray';\nimport isDragDropSupported from '@uppy/utils/lib/isDragDropSupported';\nimport getDroppedFiles from '@uppy/utils/lib/getDroppedFiles';\nimport { h } from 'preact';\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\nconst packageJson = {\n  \"version\": \"3.1.0\"\n};\nimport locale from \"./locale.js\";\n// Default options, must be kept in sync with @uppy/react/src/DragDrop.js.\nconst defaultOptions = {\n  inputName: 'files[]',\n  width: '100%',\n  height: '100%'\n};\n\n/**\n * Drag & Drop plugin\n *\n */\nexport default class DragDrop extends UIPlugin {\n  constructor(uppy, opts) {\n    super(uppy, {\n      ...defaultOptions,\n      ...opts\n    });\n    // Check for browser dragDrop support\n    this.isDragDropSupported = isDragDropSupported();\n    this.addFiles = files => {\n      const descriptors = files.map(file => ({\n        source: this.id,\n        name: file.name,\n        type: file.type,\n        data: file,\n        meta: {\n          // path of the file relative to the ancestor directory the user selected.\n          // e.g. 'docs/Old Prague/airbnb.pdf'\n          relativePath: file.relativePath || null\n        }\n      }));\n      try {\n        this.uppy.addFiles(descriptors);\n      } catch (err) {\n        this.uppy.log(err);\n      }\n    };\n    this.onInputChange = event => {\n      const files = toArray(event.target.files);\n      if (files.length > 0) {\n        this.uppy.log('[DragDrop] Files selected through input');\n        this.addFiles(files);\n      }\n\n      // We clear the input after a file is selected, because otherwise\n      // change event is not fired in Chrome and Safari when a file\n      // with the same name is selected.\n      // ___Why not use value=\"\" on <input/> instead?\n      //    Because if we use that method of clearing the input,\n      //    Chrome will not trigger change if we drop the same file twice (Issue #768).\n      // @ts-expect-error TS freaks out, but this is fine\n      // eslint-disable-next-line no-param-reassign\n      event.target.value = null;\n    };\n    this.handleDragOver = event => {\n      var _this$opts$onDragOver, _this$opts;\n      event.preventDefault();\n      event.stopPropagation();\n\n      // Check if the \"type\" of the datatransfer object includes files. If not, deny drop.\n      const {\n        types\n      } = event.dataTransfer;\n      const hasFiles = types.some(type => type === 'Files');\n      const {\n        allowNewUpload\n      } = this.uppy.getState();\n      if (!hasFiles || !allowNewUpload) {\n        // eslint-disable-next-line no-param-reassign\n        event.dataTransfer.dropEffect = 'none';\n        clearTimeout(this.removeDragOverClassTimeout);\n        return;\n      }\n\n      // Add a small (+) icon on drop\n      // (and prevent browsers from interpreting this as files being _moved_ into the browser\n      // https://github.com/transloadit/uppy/issues/1978)\n      //\n      // eslint-disable-next-line no-param-reassign\n      event.dataTransfer.dropEffect = 'copy';\n      clearTimeout(this.removeDragOverClassTimeout);\n      this.setPluginState({\n        isDraggingOver: true\n      });\n      (_this$opts$onDragOver = (_this$opts = this.opts).onDragOver) == null || _this$opts$onDragOver.call(_this$opts, event);\n    };\n    this.handleDragLeave = event => {\n      var _this$opts$onDragLeav, _this$opts2;\n      event.preventDefault();\n      event.stopPropagation();\n      clearTimeout(this.removeDragOverClassTimeout);\n      // Timeout against flickering, this solution is taken from drag-drop library.\n      // Solution with 'pointer-events: none' didn't work across browsers.\n      this.removeDragOverClassTimeout = setTimeout(() => {\n        this.setPluginState({\n          isDraggingOver: false\n        });\n      }, 50);\n      (_this$opts$onDragLeav = (_this$opts2 = this.opts).onDragLeave) == null || _this$opts$onDragLeav.call(_this$opts2, event);\n    };\n    this.handleDrop = async event => {\n      var _this$opts$onDrop, _this$opts3;\n      event.preventDefault();\n      event.stopPropagation();\n      clearTimeout(this.removeDragOverClassTimeout);\n\n      // Remove dragover class\n      this.setPluginState({\n        isDraggingOver: false\n      });\n      const logDropError = error => {\n        this.uppy.log(error, 'error');\n      };\n\n      // Add all dropped files\n      const files = await getDroppedFiles(event.dataTransfer, {\n        logDropError\n      });\n      if (files.length > 0) {\n        this.uppy.log('[DragDrop] Files dropped');\n        this.addFiles(files);\n      }\n      (_this$opts$onDrop = (_this$opts3 = this.opts).onDrop) == null || _this$opts$onDrop.call(_this$opts3, event);\n    };\n    this.type = 'acquirer';\n    this.id = this.opts.id || 'DragDrop';\n    this.title = 'Drag & Drop';\n    this.defaultLocale = locale;\n    this.i18nInit();\n  }\n  renderHiddenFileInput() {\n    const {\n      restrictions\n    } = this.uppy.opts;\n    return h(\"input\", {\n      className: \"uppy-DragDrop-input\",\n      type: \"file\",\n      hidden: true,\n      ref: ref => {\n        this.fileInputRef = ref;\n      },\n      name: this.opts.inputName,\n      multiple: restrictions.maxNumberOfFiles !== 1\n      // @ts-expect-error We actually want to coerce the array to a string (or keep it as null/undefined)\n      ,\n\n      accept: restrictions.allowedFileTypes,\n      onChange: this.onInputChange\n    });\n  }\n  static renderArrowSvg() {\n    return h(\"svg\", {\n      \"aria-hidden\": \"true\",\n      focusable: \"false\",\n      className: \"uppy-c-icon uppy-DragDrop-arrow\",\n      width: \"16\",\n      height: \"16\",\n      viewBox: \"0 0 16 16\"\n    }, h(\"path\", {\n      d: \"M11 10V0H5v10H2l6 6 6-6h-3zm0 0\",\n      fillRule: \"evenodd\"\n    }));\n  }\n  renderLabel() {\n    return h(\"div\", {\n      className: \"uppy-DragDrop-label\"\n    }, this.i18nArray('dropHereOr', {\n      browse: h(\"span\", {\n        className: \"uppy-DragDrop-browse\"\n      }, this.i18n('browse'))\n    }));\n  }\n  renderNote() {\n    return h(\"span\", {\n      className: \"uppy-DragDrop-note\"\n    }, this.opts.note);\n  }\n  render() {\n    const dragDropClass = `uppy-u-reset\n      uppy-DragDrop-container\n      ${this.isDragDropSupported ? 'uppy-DragDrop--isDragDropSupported' : ''}\n      ${this.getPluginState().isDraggingOver ? 'uppy-DragDrop--isDraggingOver' : ''}\n    `;\n    const dragDropStyle = {\n      width: this.opts.width,\n      height: this.opts.height\n    };\n    return h(\"button\", {\n      type: \"button\",\n      className: dragDropClass,\n      style: dragDropStyle,\n      onClick: () => this.fileInputRef.click(),\n      onDragOver: this.handleDragOver,\n      onDragLeave: this.handleDragLeave,\n      onDrop: this.handleDrop\n    }, this.renderHiddenFileInput(), h(\"div\", {\n      className: \"uppy-DragDrop-inner\"\n    }, DragDrop.renderArrowSvg(), this.renderLabel(), this.renderNote()));\n  }\n  install() {\n    const {\n      target\n    } = this.opts;\n    this.setPluginState({\n      isDraggingOver: false\n    });\n    if (target) {\n      this.mount(target, this);\n    }\n  }\n  uninstall() {\n    this.unmount();\n  }\n}\nDragDrop.VERSION = packageJson.version;","map":{"version":3,"names":["UIPlugin","toArray","isDragDropSupported","getDroppedFiles","h","packageJson","locale","defaultOptions","inputName","width","height","DragDrop","constructor","uppy","opts","addFiles","files","descriptors","map","file","source","id","name","type","data","meta","relativePath","err","log","onInputChange","event","target","length","value","handleDragOver","_this$opts$onDragOver","_this$opts","preventDefault","stopPropagation","types","dataTransfer","hasFiles","some","allowNewUpload","getState","dropEffect","clearTimeout","removeDragOverClassTimeout","setPluginState","isDraggingOver","onDragOver","call","handleDragLeave","_this$opts$onDragLeav","_this$opts2","setTimeout","onDragLeave","handleDrop","_this$opts$onDrop","_this$opts3","logDropError","error","onDrop","title","defaultLocale","i18nInit","renderHiddenFileInput","restrictions","className","hidden","ref","fileInputRef","multiple","maxNumberOfFiles","accept","allowedFileTypes","onChange","renderArrowSvg","focusable","viewBox","d","fillRule","renderLabel","i18nArray","browse","i18n","renderNote","note","render","dragDropClass","getPluginState","dragDropStyle","style","onClick","click","install","mount","uninstall","unmount","VERSION","version"],"sources":["/home/nainar/Documents/reactProjects/userAuthentiCator/registeration-login/node_modules/@uppy/drag-drop/lib/DragDrop.js"],"sourcesContent":["import { UIPlugin } from '@uppy/core';\nimport toArray from '@uppy/utils/lib/toArray';\nimport isDragDropSupported from '@uppy/utils/lib/isDragDropSupported';\nimport getDroppedFiles from '@uppy/utils/lib/getDroppedFiles';\nimport { h } from 'preact';\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\nconst packageJson = {\n  \"version\": \"3.1.0\"\n};\nimport locale from \"./locale.js\";\n// Default options, must be kept in sync with @uppy/react/src/DragDrop.js.\nconst defaultOptions = {\n  inputName: 'files[]',\n  width: '100%',\n  height: '100%'\n};\n\n/**\n * Drag & Drop plugin\n *\n */\nexport default class DragDrop extends UIPlugin {\n  constructor(uppy, opts) {\n    super(uppy, {\n      ...defaultOptions,\n      ...opts\n    });\n    // Check for browser dragDrop support\n    this.isDragDropSupported = isDragDropSupported();\n    this.addFiles = files => {\n      const descriptors = files.map(file => ({\n        source: this.id,\n        name: file.name,\n        type: file.type,\n        data: file,\n        meta: {\n          // path of the file relative to the ancestor directory the user selected.\n          // e.g. 'docs/Old Prague/airbnb.pdf'\n          relativePath: file.relativePath || null\n        }\n      }));\n      try {\n        this.uppy.addFiles(descriptors);\n      } catch (err) {\n        this.uppy.log(err);\n      }\n    };\n    this.onInputChange = event => {\n      const files = toArray(event.target.files);\n      if (files.length > 0) {\n        this.uppy.log('[DragDrop] Files selected through input');\n        this.addFiles(files);\n      }\n\n      // We clear the input after a file is selected, because otherwise\n      // change event is not fired in Chrome and Safari when a file\n      // with the same name is selected.\n      // ___Why not use value=\"\" on <input/> instead?\n      //    Because if we use that method of clearing the input,\n      //    Chrome will not trigger change if we drop the same file twice (Issue #768).\n      // @ts-expect-error TS freaks out, but this is fine\n      // eslint-disable-next-line no-param-reassign\n      event.target.value = null;\n    };\n    this.handleDragOver = event => {\n      var _this$opts$onDragOver, _this$opts;\n      event.preventDefault();\n      event.stopPropagation();\n\n      // Check if the \"type\" of the datatransfer object includes files. If not, deny drop.\n      const {\n        types\n      } = event.dataTransfer;\n      const hasFiles = types.some(type => type === 'Files');\n      const {\n        allowNewUpload\n      } = this.uppy.getState();\n      if (!hasFiles || !allowNewUpload) {\n        // eslint-disable-next-line no-param-reassign\n        event.dataTransfer.dropEffect = 'none';\n        clearTimeout(this.removeDragOverClassTimeout);\n        return;\n      }\n\n      // Add a small (+) icon on drop\n      // (and prevent browsers from interpreting this as files being _moved_ into the browser\n      // https://github.com/transloadit/uppy/issues/1978)\n      //\n      // eslint-disable-next-line no-param-reassign\n      event.dataTransfer.dropEffect = 'copy';\n      clearTimeout(this.removeDragOverClassTimeout);\n      this.setPluginState({\n        isDraggingOver: true\n      });\n      (_this$opts$onDragOver = (_this$opts = this.opts).onDragOver) == null || _this$opts$onDragOver.call(_this$opts, event);\n    };\n    this.handleDragLeave = event => {\n      var _this$opts$onDragLeav, _this$opts2;\n      event.preventDefault();\n      event.stopPropagation();\n      clearTimeout(this.removeDragOverClassTimeout);\n      // Timeout against flickering, this solution is taken from drag-drop library.\n      // Solution with 'pointer-events: none' didn't work across browsers.\n      this.removeDragOverClassTimeout = setTimeout(() => {\n        this.setPluginState({\n          isDraggingOver: false\n        });\n      }, 50);\n      (_this$opts$onDragLeav = (_this$opts2 = this.opts).onDragLeave) == null || _this$opts$onDragLeav.call(_this$opts2, event);\n    };\n    this.handleDrop = async event => {\n      var _this$opts$onDrop, _this$opts3;\n      event.preventDefault();\n      event.stopPropagation();\n      clearTimeout(this.removeDragOverClassTimeout);\n\n      // Remove dragover class\n      this.setPluginState({\n        isDraggingOver: false\n      });\n      const logDropError = error => {\n        this.uppy.log(error, 'error');\n      };\n\n      // Add all dropped files\n      const files = await getDroppedFiles(event.dataTransfer, {\n        logDropError\n      });\n      if (files.length > 0) {\n        this.uppy.log('[DragDrop] Files dropped');\n        this.addFiles(files);\n      }\n      (_this$opts$onDrop = (_this$opts3 = this.opts).onDrop) == null || _this$opts$onDrop.call(_this$opts3, event);\n    };\n    this.type = 'acquirer';\n    this.id = this.opts.id || 'DragDrop';\n    this.title = 'Drag & Drop';\n    this.defaultLocale = locale;\n    this.i18nInit();\n  }\n  renderHiddenFileInput() {\n    const {\n      restrictions\n    } = this.uppy.opts;\n    return h(\"input\", {\n      className: \"uppy-DragDrop-input\",\n      type: \"file\",\n      hidden: true,\n      ref: ref => {\n        this.fileInputRef = ref;\n      },\n      name: this.opts.inputName,\n      multiple: restrictions.maxNumberOfFiles !== 1\n      // @ts-expect-error We actually want to coerce the array to a string (or keep it as null/undefined)\n      ,\n      accept: restrictions.allowedFileTypes,\n      onChange: this.onInputChange\n    });\n  }\n  static renderArrowSvg() {\n    return h(\"svg\", {\n      \"aria-hidden\": \"true\",\n      focusable: \"false\",\n      className: \"uppy-c-icon uppy-DragDrop-arrow\",\n      width: \"16\",\n      height: \"16\",\n      viewBox: \"0 0 16 16\"\n    }, h(\"path\", {\n      d: \"M11 10V0H5v10H2l6 6 6-6h-3zm0 0\",\n      fillRule: \"evenodd\"\n    }));\n  }\n  renderLabel() {\n    return h(\"div\", {\n      className: \"uppy-DragDrop-label\"\n    }, this.i18nArray('dropHereOr', {\n      browse: h(\"span\", {\n        className: \"uppy-DragDrop-browse\"\n      }, this.i18n('browse'))\n    }));\n  }\n  renderNote() {\n    return h(\"span\", {\n      className: \"uppy-DragDrop-note\"\n    }, this.opts.note);\n  }\n  render() {\n    const dragDropClass = `uppy-u-reset\n      uppy-DragDrop-container\n      ${this.isDragDropSupported ? 'uppy-DragDrop--isDragDropSupported' : ''}\n      ${this.getPluginState().isDraggingOver ? 'uppy-DragDrop--isDraggingOver' : ''}\n    `;\n    const dragDropStyle = {\n      width: this.opts.width,\n      height: this.opts.height\n    };\n    return h(\"button\", {\n      type: \"button\",\n      className: dragDropClass,\n      style: dragDropStyle,\n      onClick: () => this.fileInputRef.click(),\n      onDragOver: this.handleDragOver,\n      onDragLeave: this.handleDragLeave,\n      onDrop: this.handleDrop\n    }, this.renderHiddenFileInput(), h(\"div\", {\n      className: \"uppy-DragDrop-inner\"\n    }, DragDrop.renderArrowSvg(), this.renderLabel(), this.renderNote()));\n  }\n  install() {\n    const {\n      target\n    } = this.opts;\n    this.setPluginState({\n      isDraggingOver: false\n    });\n    if (target) {\n      this.mount(target, this);\n    }\n  }\n  uninstall() {\n    this.unmount();\n  }\n}\nDragDrop.VERSION = packageJson.version;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}