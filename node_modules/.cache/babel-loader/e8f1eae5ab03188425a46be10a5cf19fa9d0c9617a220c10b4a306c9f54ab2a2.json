{"ast":null,"code":"import getFilesAndDirectoriesFromDirectory from \"./getFilesAndDirectoriesFromDirectory.js\";\n/**\n * Polyfill for the new (experimental) getAsFileSystemHandle API (using the popular webkitGetAsEntry behind the scenes)\n * so that we can switch to the getAsFileSystemHandle API once it (hopefully) becomes standard\n */\nfunction getAsFileSystemHandleFromEntry(entry, logDropError) {\n  if (entry == null) return entry;\n  return {\n    kind:\n    // eslint-disable-next-line no-nested-ternary\n    entry.isFile ? 'file' : entry.isDirectory ? 'directory' : undefined,\n    name: entry.name,\n    getFile() {\n      return new Promise((resolve, reject) => entry.file(resolve, reject));\n    },\n    async *values() {\n      // If the file is a directory.\n      const directoryReader = entry.createReader();\n      const entries = await new Promise(resolve => {\n        getFilesAndDirectoriesFromDirectory(directoryReader, [], logDropError, {\n          onSuccess: dirEntries => resolve(dirEntries.map(file => getAsFileSystemHandleFromEntry(file, logDropError)))\n        });\n      });\n      yield* entries;\n    },\n    isSameEntry: undefined\n  };\n}\nfunction createPromiseToAddFileOrParseDirectory(entry, relativePath, lastResortFile) {\n  try {\n    if (lastResortFile === void 0) {\n      lastResortFile = undefined;\n    }\n    return async function* () {\n      const getNextRelativePath = () => `${relativePath}/${entry.name}`;\n\n      // For each dropped item, - make sure it's a file/directory, and start deepening in!\n      if (entry.kind === 'file') {\n        const file = await entry.getFile();\n        if (file != null) {\n          ;\n          file.relativePath = relativePath ? getNextRelativePath() : null;\n          yield file;\n        } else if (lastResortFile != null) yield lastResortFile;\n      } else if (entry.kind === 'directory') {\n        for await (const handle of entry.values()) {\n          // Recurse on the directory, appending the dir name to the relative path\n          yield* createPromiseToAddFileOrParseDirectory(handle, relativePath ? getNextRelativePath() : entry.name);\n        }\n      } else if (lastResortFile != null) yield lastResortFile;\n    }();\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n\n/**\n * Load all files from data transfer, and recursively read any directories.\n * Note that IE is not supported for drag-drop, because IE doesn't support Data Transfers\n *\n * @param {DataTransfer} dataTransfer\n * @param {*} logDropError on error\n */\nexport default async function* getFilesFromDataTransfer(dataTransfer, logDropError) {\n  // Retrieving the dropped items must happen synchronously\n  // otherwise only the first item gets treated and the other ones are garbage collected.\n  // https://github.com/transloadit/uppy/pull/3998\n  const fileSystemHandles = await Promise.all(Array.from(dataTransfer.items, async item => {\n    var _fileSystemHandle;\n    let fileSystemHandle;\n\n    // TODO enable getAsFileSystemHandle API once we can get it working with subdirectories\n    // IMPORTANT: Need to check isSecureContext *before* calling getAsFileSystemHandle\n    // or else Chrome will crash when running in HTTP: https://github.com/transloadit/uppy/issues/4133\n    // if (window.isSecureContext && item.getAsFileSystemHandle != null)\n    // fileSystemHandle = await item.getAsFileSystemHandle()\n\n    // `webkitGetAsEntry` exists in all popular browsers (including non-WebKit browsers),\n    // however it may be renamed to getAsEntry() in the future, so you should code defensively, looking for both.\n    // from https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/webkitGetAsEntry\n    const getAsEntry = () => typeof item.getAsEntry === 'function' ? item.getAsEntry() : item.webkitGetAsEntry();\n    // eslint-disable-next-line prefer-const\n    (_fileSystemHandle = fileSystemHandle) != null ? _fileSystemHandle : fileSystemHandle = getAsFileSystemHandleFromEntry(getAsEntry(), logDropError);\n    return {\n      fileSystemHandle,\n      lastResortFile: item.getAsFile() // can be used as a fallback in case other methods fail\n    };\n  }));\n\n  for (const {\n    lastResortFile,\n    fileSystemHandle\n  } of fileSystemHandles) {\n    // fileSystemHandle and lastResortFile can be null when we drop an url.\n    if (fileSystemHandle != null) {\n      try {\n        yield* createPromiseToAddFileOrParseDirectory(fileSystemHandle, '', lastResortFile);\n      } catch (err) {\n        // Example: If dropping a symbolic link, Chromium will throw:\n        // \"DOMException: A requested file or directory could not be found at the time an operation was processed.\",\n        // So we will use lastResortFile instead. See https://github.com/transloadit/uppy/issues/3505.\n        if (lastResortFile != null) {\n          yield lastResortFile;\n        } else {\n          logDropError(err);\n        }\n      }\n    } else if (lastResortFile != null) yield lastResortFile;\n  }\n}","map":{"version":3,"names":["getFilesAndDirectoriesFromDirectory","getAsFileSystemHandleFromEntry","entry","logDropError","kind","isFile","isDirectory","undefined","name","getFile","Promise","resolve","reject","file","values","directoryReader","createReader","entries","onSuccess","dirEntries","map","isSameEntry","createPromiseToAddFileOrParseDirectory","relativePath","lastResortFile","getNextRelativePath","handle","e","getFilesFromDataTransfer","dataTransfer","fileSystemHandles","all","Array","from","items","item","_fileSystemHandle","fileSystemHandle","getAsEntry","webkitGetAsEntry","getAsFile","err"],"sources":["/home/nainar/Documents/reactProjects/userAuthentiCator/registeration-login/node_modules/@uppy/utils/lib/getDroppedFiles/utils/webkitGetAsEntryApi/index.js"],"sourcesContent":["import getFilesAndDirectoriesFromDirectory from \"./getFilesAndDirectoriesFromDirectory.js\";\n/**\n * Polyfill for the new (experimental) getAsFileSystemHandle API (using the popular webkitGetAsEntry behind the scenes)\n * so that we can switch to the getAsFileSystemHandle API once it (hopefully) becomes standard\n */\nfunction getAsFileSystemHandleFromEntry(entry, logDropError) {\n  if (entry == null) return entry;\n  return {\n    kind:\n    // eslint-disable-next-line no-nested-ternary\n    entry.isFile ? 'file' : entry.isDirectory ? 'directory' : undefined,\n    name: entry.name,\n    getFile() {\n      return new Promise((resolve, reject) => entry.file(resolve, reject));\n    },\n    async *values() {\n      // If the file is a directory.\n      const directoryReader = entry.createReader();\n      const entries = await new Promise(resolve => {\n        getFilesAndDirectoriesFromDirectory(directoryReader, [], logDropError, {\n          onSuccess: dirEntries => resolve(dirEntries.map(file => getAsFileSystemHandleFromEntry(file, logDropError)))\n        });\n      });\n      yield* entries;\n    },\n    isSameEntry: undefined\n  };\n}\nfunction createPromiseToAddFileOrParseDirectory(entry, relativePath, lastResortFile) {\n  try {\n    if (lastResortFile === void 0) {\n      lastResortFile = undefined;\n    }\n    return async function* () {\n      const getNextRelativePath = () => `${relativePath}/${entry.name}`;\n\n      // For each dropped item, - make sure it's a file/directory, and start deepening in!\n      if (entry.kind === 'file') {\n        const file = await entry.getFile();\n        if (file != null) {\n          ;\n          file.relativePath = relativePath ? getNextRelativePath() : null;\n          yield file;\n        } else if (lastResortFile != null) yield lastResortFile;\n      } else if (entry.kind === 'directory') {\n        for await (const handle of entry.values()) {\n          // Recurse on the directory, appending the dir name to the relative path\n          yield* createPromiseToAddFileOrParseDirectory(handle, relativePath ? getNextRelativePath() : entry.name);\n        }\n      } else if (lastResortFile != null) yield lastResortFile;\n    }();\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n\n/**\n * Load all files from data transfer, and recursively read any directories.\n * Note that IE is not supported for drag-drop, because IE doesn't support Data Transfers\n *\n * @param {DataTransfer} dataTransfer\n * @param {*} logDropError on error\n */\nexport default async function* getFilesFromDataTransfer(dataTransfer, logDropError) {\n  // Retrieving the dropped items must happen synchronously\n  // otherwise only the first item gets treated and the other ones are garbage collected.\n  // https://github.com/transloadit/uppy/pull/3998\n  const fileSystemHandles = await Promise.all(Array.from(dataTransfer.items, async item => {\n    var _fileSystemHandle;\n    let fileSystemHandle;\n\n    // TODO enable getAsFileSystemHandle API once we can get it working with subdirectories\n    // IMPORTANT: Need to check isSecureContext *before* calling getAsFileSystemHandle\n    // or else Chrome will crash when running in HTTP: https://github.com/transloadit/uppy/issues/4133\n    // if (window.isSecureContext && item.getAsFileSystemHandle != null)\n    // fileSystemHandle = await item.getAsFileSystemHandle()\n\n    // `webkitGetAsEntry` exists in all popular browsers (including non-WebKit browsers),\n    // however it may be renamed to getAsEntry() in the future, so you should code defensively, looking for both.\n    // from https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/webkitGetAsEntry\n    const getAsEntry = () => typeof item.getAsEntry === 'function' ? item.getAsEntry() : item.webkitGetAsEntry();\n    // eslint-disable-next-line prefer-const\n    (_fileSystemHandle = fileSystemHandle) != null ? _fileSystemHandle : fileSystemHandle = getAsFileSystemHandleFromEntry(getAsEntry(), logDropError);\n    return {\n      fileSystemHandle,\n      lastResortFile: item.getAsFile() // can be used as a fallback in case other methods fail\n    };\n  }));\n  for (const {\n    lastResortFile,\n    fileSystemHandle\n  } of fileSystemHandles) {\n    // fileSystemHandle and lastResortFile can be null when we drop an url.\n    if (fileSystemHandle != null) {\n      try {\n        yield* createPromiseToAddFileOrParseDirectory(fileSystemHandle, '', lastResortFile);\n      } catch (err) {\n        // Example: If dropping a symbolic link, Chromium will throw:\n        // \"DOMException: A requested file or directory could not be found at the time an operation was processed.\",\n        // So we will use lastResortFile instead. See https://github.com/transloadit/uppy/issues/3505.\n        if (lastResortFile != null) {\n          yield lastResortFile;\n        } else {\n          logDropError(err);\n        }\n      }\n    } else if (lastResortFile != null) yield lastResortFile;\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}