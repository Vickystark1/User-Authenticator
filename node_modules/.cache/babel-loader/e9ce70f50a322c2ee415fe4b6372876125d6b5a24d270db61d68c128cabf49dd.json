{"ast":null,"code":"import { cloneElement, toChildArray } from 'preact';\nimport { useEffect, useState, useRef } from 'preact/hooks';\nimport classNames from 'classnames';\nconst transitionName = 'uppy-transition-slideDownUp';\nconst duration = 250;\n\n/**\n * Vertical slide transition.\n *\n * This can take a _single_ child component, which _must_ accept a `className` prop.\n *\n * Currently this is specific to the `uppy-transition-slideDownUp` transition,\n * but it should be simple to extend this for any type of single-element\n * transition by setting the CSS name and duration as props.\n */\nfunction Slide(_ref) {\n  let {\n    children\n  } = _ref;\n  const [cachedChildren, setCachedChildren] = useState(null);\n  const [className, setClassName] = useState('');\n  const enterTimeoutRef = useRef();\n  const leaveTimeoutRef = useRef();\n  const animationFrameRef = useRef();\n  const handleEnterTransition = () => {\n    setClassName(`${transitionName}-enter`);\n    cancelAnimationFrame(animationFrameRef.current);\n    clearTimeout(leaveTimeoutRef.current);\n    leaveTimeoutRef.current = undefined;\n    animationFrameRef.current = requestAnimationFrame(() => {\n      setClassName(`${transitionName}-enter ${transitionName}-enter-active`);\n      enterTimeoutRef.current = setTimeout(() => {\n        setClassName('');\n      }, duration);\n    });\n  };\n  const handleLeaveTransition = () => {\n    setClassName(`${transitionName}-leave`);\n    cancelAnimationFrame(animationFrameRef.current);\n    clearTimeout(enterTimeoutRef.current);\n    enterTimeoutRef.current = undefined;\n    animationFrameRef.current = requestAnimationFrame(() => {\n      setClassName(`${transitionName}-leave ${transitionName}-leave-active`);\n      leaveTimeoutRef.current = setTimeout(() => {\n        setCachedChildren(null);\n        setClassName('');\n      }, duration);\n    });\n  };\n  useEffect(() => {\n    const child = toChildArray(children)[0];\n    if (cachedChildren === child) return;\n    if (child && !cachedChildren) {\n      handleEnterTransition();\n    } else if (cachedChildren && !child && !leaveTimeoutRef.current) {\n      handleLeaveTransition();\n    }\n    setCachedChildren(child);\n  }, [children, cachedChildren]); // Dependency array to trigger effect on children change\n\n  useEffect(() => {\n    return () => {\n      clearTimeout(enterTimeoutRef.current);\n      clearTimeout(leaveTimeoutRef.current);\n      cancelAnimationFrame(animationFrameRef.current);\n    };\n  }, []); // Cleanup useEffect\n\n  if (!cachedChildren) return null;\n  return cloneElement(cachedChildren, {\n    className: classNames(className, cachedChildren.props.className)\n  });\n}\nexport default Slide;","map":{"version":3,"names":["cloneElement","toChildArray","useEffect","useState","useRef","classNames","transitionName","duration","Slide","_ref","children","cachedChildren","setCachedChildren","className","setClassName","enterTimeoutRef","leaveTimeoutRef","animationFrameRef","handleEnterTransition","cancelAnimationFrame","current","clearTimeout","undefined","requestAnimationFrame","setTimeout","handleLeaveTransition","child","props"],"sources":["/home/nainar/Documents/reactProjects/userAuthentiCator/registeration-login/node_modules/@uppy/dashboard/lib/components/Slide.js"],"sourcesContent":["import { cloneElement, toChildArray } from 'preact';\nimport { useEffect, useState, useRef } from 'preact/hooks';\nimport classNames from 'classnames';\nconst transitionName = 'uppy-transition-slideDownUp';\nconst duration = 250;\n\n/**\n * Vertical slide transition.\n *\n * This can take a _single_ child component, which _must_ accept a `className` prop.\n *\n * Currently this is specific to the `uppy-transition-slideDownUp` transition,\n * but it should be simple to extend this for any type of single-element\n * transition by setting the CSS name and duration as props.\n */\nfunction Slide(_ref) {\n  let {\n    children\n  } = _ref;\n  const [cachedChildren, setCachedChildren] = useState(null);\n  const [className, setClassName] = useState('');\n  const enterTimeoutRef = useRef();\n  const leaveTimeoutRef = useRef();\n  const animationFrameRef = useRef();\n  const handleEnterTransition = () => {\n    setClassName(`${transitionName}-enter`);\n    cancelAnimationFrame(animationFrameRef.current);\n    clearTimeout(leaveTimeoutRef.current);\n    leaveTimeoutRef.current = undefined;\n    animationFrameRef.current = requestAnimationFrame(() => {\n      setClassName(`${transitionName}-enter ${transitionName}-enter-active`);\n      enterTimeoutRef.current = setTimeout(() => {\n        setClassName('');\n      }, duration);\n    });\n  };\n  const handleLeaveTransition = () => {\n    setClassName(`${transitionName}-leave`);\n    cancelAnimationFrame(animationFrameRef.current);\n    clearTimeout(enterTimeoutRef.current);\n    enterTimeoutRef.current = undefined;\n    animationFrameRef.current = requestAnimationFrame(() => {\n      setClassName(`${transitionName}-leave ${transitionName}-leave-active`);\n      leaveTimeoutRef.current = setTimeout(() => {\n        setCachedChildren(null);\n        setClassName('');\n      }, duration);\n    });\n  };\n  useEffect(() => {\n    const child = toChildArray(children)[0];\n    if (cachedChildren === child) return;\n    if (child && !cachedChildren) {\n      handleEnterTransition();\n    } else if (cachedChildren && !child && !leaveTimeoutRef.current) {\n      handleLeaveTransition();\n    }\n    setCachedChildren(child);\n  }, [children, cachedChildren]); // Dependency array to trigger effect on children change\n\n  useEffect(() => {\n    return () => {\n      clearTimeout(enterTimeoutRef.current);\n      clearTimeout(leaveTimeoutRef.current);\n      cancelAnimationFrame(animationFrameRef.current);\n    };\n  }, []); // Cleanup useEffect\n\n  if (!cachedChildren) return null;\n  return cloneElement(cachedChildren, {\n    className: classNames(className, cachedChildren.props.className)\n  });\n}\nexport default Slide;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}