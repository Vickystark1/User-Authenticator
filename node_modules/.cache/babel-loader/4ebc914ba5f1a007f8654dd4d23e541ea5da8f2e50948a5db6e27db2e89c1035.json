{"ast":null,"code":"/* eslint-disable class-methods-use-this */\n\n/**\n * Core plugin logic that all plugins share.\n *\n * BasePlugin does not contain DOM rendering so it can be used for plugins\n * without a user interface.\n *\n * See `Plugin` for the extended version with Preact rendering for interfaces.\n */\n\nimport Translator from '@uppy/utils/lib/Translator';\n\n/**\n * DefinePluginOpts marks all of the passed AlwaysDefinedKeys as “required” or “always defined”.\n */\n\nexport default class BasePlugin {\n  constructor(uppy, opts) {\n    this.uppy = uppy;\n    this.opts = opts != null ? opts : {};\n  }\n  getPluginState() {\n    const {\n      plugins\n    } = this.uppy.getState();\n    return (plugins == null ? void 0 : plugins[this.id]) || {};\n  }\n  setPluginState(update) {\n    if (!update) return;\n    const {\n      plugins\n    } = this.uppy.getState();\n    this.uppy.setState({\n      plugins: {\n        ...plugins,\n        [this.id]: {\n          ...plugins[this.id],\n          ...update\n        }\n      }\n    });\n  }\n  setOptions(newOpts) {\n    this.opts = {\n      ...this.opts,\n      ...newOpts\n    };\n    this.setPluginState(undefined); // so that UI re-renders with new options\n    this.i18nInit();\n  }\n  i18nInit() {\n    const translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale]);\n    this.i18n = translator.translate.bind(translator);\n    this.i18nArray = translator.translateArray.bind(translator);\n    this.setPluginState(undefined); // so that UI re-renders and we see the updated locale\n  }\n\n  /**\n   * Extendable methods\n   * ==================\n   * These methods are here to serve as an overview of the extendable methods as well as\n   * making them not conditional in use, such as `if (this.afterUpdate)`.\n   */\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  addTarget(plugin) {\n    throw new Error(\"Extend the addTarget method to add your plugin to another plugin's target\");\n  }\n  install() {}\n  uninstall() {}\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  update(state) {}\n\n  // Called after every state update, after everything's mounted. Debounced.\n  afterUpdate() {}\n}","map":{"version":3,"names":["Translator","BasePlugin","constructor","uppy","opts","getPluginState","plugins","getState","id","setPluginState","update","setState","setOptions","newOpts","undefined","i18nInit","translator","defaultLocale","locale","i18n","translate","bind","i18nArray","translateArray","addTarget","plugin","Error","install","uninstall","state","afterUpdate"],"sources":["/home/nainar/Documents/reactProjects/userAuthentiCator/registeration-login/node_modules/@uppy/core/lib/BasePlugin.js"],"sourcesContent":["/* eslint-disable class-methods-use-this */\n\n/**\n * Core plugin logic that all plugins share.\n *\n * BasePlugin does not contain DOM rendering so it can be used for plugins\n * without a user interface.\n *\n * See `Plugin` for the extended version with Preact rendering for interfaces.\n */\n\nimport Translator from '@uppy/utils/lib/Translator';\n\n/**\n * DefinePluginOpts marks all of the passed AlwaysDefinedKeys as “required” or “always defined”.\n */\n\nexport default class BasePlugin {\n  constructor(uppy, opts) {\n    this.uppy = uppy;\n    this.opts = opts != null ? opts : {};\n  }\n  getPluginState() {\n    const {\n      plugins\n    } = this.uppy.getState();\n    return (plugins == null ? void 0 : plugins[this.id]) || {};\n  }\n  setPluginState(update) {\n    if (!update) return;\n    const {\n      plugins\n    } = this.uppy.getState();\n    this.uppy.setState({\n      plugins: {\n        ...plugins,\n        [this.id]: {\n          ...plugins[this.id],\n          ...update\n        }\n      }\n    });\n  }\n  setOptions(newOpts) {\n    this.opts = {\n      ...this.opts,\n      ...newOpts\n    };\n    this.setPluginState(undefined); // so that UI re-renders with new options\n    this.i18nInit();\n  }\n  i18nInit() {\n    const translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale]);\n    this.i18n = translator.translate.bind(translator);\n    this.i18nArray = translator.translateArray.bind(translator);\n    this.setPluginState(undefined); // so that UI re-renders and we see the updated locale\n  }\n\n  /**\n   * Extendable methods\n   * ==================\n   * These methods are here to serve as an overview of the extendable methods as well as\n   * making them not conditional in use, such as `if (this.afterUpdate)`.\n   */\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  addTarget(plugin) {\n    throw new Error(\"Extend the addTarget method to add your plugin to another plugin's target\");\n  }\n  install() {}\n  uninstall() {}\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  update(state) {}\n\n  // Called after every state update, after everything's mounted. Debounced.\n  afterUpdate() {}\n}"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,UAAU,MAAM,4BAA4B;;AAEnD;AACA;AACA;;AAEA,eAAe,MAAMC,UAAU,CAAC;EAC9BC,WAAWA,CAACC,IAAI,EAAEC,IAAI,EAAE;IACtB,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI,IAAI,IAAI,GAAGA,IAAI,GAAG,CAAC,CAAC;EACtC;EACAC,cAAcA,CAAA,EAAG;IACf,MAAM;MACJC;IACF,CAAC,GAAG,IAAI,CAACH,IAAI,CAACI,QAAQ,CAAC,CAAC;IACxB,OAAO,CAACD,OAAO,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,OAAO,CAAC,IAAI,CAACE,EAAE,CAAC,KAAK,CAAC,CAAC;EAC5D;EACAC,cAAcA,CAACC,MAAM,EAAE;IACrB,IAAI,CAACA,MAAM,EAAE;IACb,MAAM;MACJJ;IACF,CAAC,GAAG,IAAI,CAACH,IAAI,CAACI,QAAQ,CAAC,CAAC;IACxB,IAAI,CAACJ,IAAI,CAACQ,QAAQ,CAAC;MACjBL,OAAO,EAAE;QACP,GAAGA,OAAO;QACV,CAAC,IAAI,CAACE,EAAE,GAAG;UACT,GAAGF,OAAO,CAAC,IAAI,CAACE,EAAE,CAAC;UACnB,GAAGE;QACL;MACF;IACF,CAAC,CAAC;EACJ;EACAE,UAAUA,CAACC,OAAO,EAAE;IAClB,IAAI,CAACT,IAAI,GAAG;MACV,GAAG,IAAI,CAACA,IAAI;MACZ,GAAGS;IACL,CAAC;IACD,IAAI,CAACJ,cAAc,CAACK,SAAS,CAAC,CAAC,CAAC;IAChC,IAAI,CAACC,QAAQ,CAAC,CAAC;EACjB;EACAA,QAAQA,CAAA,EAAG;IACT,MAAMC,UAAU,GAAG,IAAIhB,UAAU,CAAC,CAAC,IAAI,CAACiB,aAAa,EAAE,IAAI,CAACd,IAAI,CAACe,MAAM,EAAE,IAAI,CAACd,IAAI,CAACc,MAAM,CAAC,CAAC;IAC3F,IAAI,CAACC,IAAI,GAAGH,UAAU,CAACI,SAAS,CAACC,IAAI,CAACL,UAAU,CAAC;IACjD,IAAI,CAACM,SAAS,GAAGN,UAAU,CAACO,cAAc,CAACF,IAAI,CAACL,UAAU,CAAC;IAC3D,IAAI,CAACP,cAAc,CAACK,SAAS,CAAC,CAAC,CAAC;EAClC;;EAEA;AACF;AACA;AACA;AACA;AACA;;EAEE;EACAU,SAASA,CAACC,MAAM,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,2EAA2E,CAAC;EAC9F;EACAC,OAAOA,CAAA,EAAG,CAAC;EACXC,SAASA,CAAA,EAAG,CAAC;;EAEb;EACAlB,MAAMA,CAACmB,KAAK,EAAE,CAAC;;EAEf;EACAC,WAAWA,CAAA,EAAG,CAAC;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}