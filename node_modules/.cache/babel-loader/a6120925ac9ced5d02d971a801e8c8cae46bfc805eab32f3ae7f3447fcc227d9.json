{"ast":null,"code":"function _classPrivateFieldLooseBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n  return receiver;\n}\nvar id = 0;\nfunction _classPrivateFieldLooseKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}\nimport { UIPlugin } from '@uppy/core';\nimport emaFilter from '@uppy/utils/lib/emaFilter';\nimport getTextDirection from '@uppy/utils/lib/getTextDirection';\nimport statusBarStates from \"./StatusBarStates.js\";\nimport StatusBarUI from \"./StatusBarUI.js\";\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\nconst packageJson = {\n  \"version\": \"3.3.1\"\n};\nimport locale from \"./locale.js\";\nconst speedFilterHalfLife = 2000;\nconst ETAFilterHalfLife = 2000;\nfunction getUploadingState(error, isAllComplete, recoveredState, files) {\n  if (error) {\n    return statusBarStates.STATE_ERROR;\n  }\n  if (isAllComplete) {\n    return statusBarStates.STATE_COMPLETE;\n  }\n  if (recoveredState) {\n    return statusBarStates.STATE_WAITING;\n  }\n  let state = statusBarStates.STATE_WAITING;\n  const fileIDs = Object.keys(files);\n  for (let i = 0; i < fileIDs.length; i++) {\n    const {\n      progress\n    } = files[fileIDs[i]];\n    // If ANY files are being uploaded right now, show the uploading state.\n    if (progress.uploadStarted && !progress.uploadComplete) {\n      return statusBarStates.STATE_UPLOADING;\n    }\n    // If files are being preprocessed AND postprocessed at this time, we show the\n    // preprocess state. If any files are being uploaded we show uploading.\n    if (progress.preprocess) {\n      state = statusBarStates.STATE_PREPROCESSING;\n    }\n    // If NO files are being preprocessed or uploaded right now, but some files are\n    // being postprocessed, show the postprocess state.\n    if (progress.postprocess && state !== statusBarStates.STATE_PREPROCESSING) {\n      state = statusBarStates.STATE_POSTPROCESSING;\n    }\n  }\n  return state;\n}\n\n// set default options, must be kept in sync with @uppy/react/src/StatusBar.js\nconst defaultOptions = {\n  target: 'body',\n  hideUploadButton: false,\n  hideRetryButton: false,\n  hidePauseResumeButton: false,\n  hideCancelButton: false,\n  showProgressDetails: false,\n  hideAfterFinish: true,\n  doneButtonHandler: null\n};\n\n/**\n * StatusBar: renders a status bar with upload/pause/resume/cancel/retry buttons,\n * progress percentage and time remaining.\n */\nvar _lastUpdateTime = /*#__PURE__*/_classPrivateFieldLooseKey(\"lastUpdateTime\");\nvar _previousUploadedBytes = /*#__PURE__*/_classPrivateFieldLooseKey(\"previousUploadedBytes\");\nvar _previousSpeed = /*#__PURE__*/_classPrivateFieldLooseKey(\"previousSpeed\");\nvar _previousETA = /*#__PURE__*/_classPrivateFieldLooseKey(\"previousETA\");\nvar _computeSmoothETA = /*#__PURE__*/_classPrivateFieldLooseKey(\"computeSmoothETA\");\nvar _onUploadStart = /*#__PURE__*/_classPrivateFieldLooseKey(\"onUploadStart\");\nexport default class StatusBar extends UIPlugin {\n  constructor(uppy, opts) {\n    super(uppy, {\n      ...defaultOptions,\n      ...opts\n    });\n    Object.defineProperty(this, _computeSmoothETA, {\n      value: _computeSmoothETA2\n    });\n    Object.defineProperty(this, _lastUpdateTime, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _previousUploadedBytes, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _previousSpeed, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _previousETA, {\n      writable: true,\n      value: void 0\n    });\n    this.startUpload = () => {\n      return this.uppy.upload().catch(() => {\n        // Error logged in Core\n      });\n    };\n    Object.defineProperty(this, _onUploadStart, {\n      writable: true,\n      value: () => {\n        const {\n          recoveredState\n        } = this.uppy.getState();\n        _classPrivateFieldLooseBase(this, _previousSpeed)[_previousSpeed] = null;\n        _classPrivateFieldLooseBase(this, _previousETA)[_previousETA] = null;\n        if (recoveredState) {\n          _classPrivateFieldLooseBase(this, _previousUploadedBytes)[_previousUploadedBytes] = Object.values(recoveredState.files).reduce((pv, _ref) => {\n            let {\n              progress\n            } = _ref;\n            return pv + progress.bytesUploaded;\n          }, 0);\n\n          // We don't set `#lastUpdateTime` at this point because the upload won't\n          // actually resume until the user asks for it.\n\n          this.uppy.emit('restore-confirmed');\n          return;\n        }\n        _classPrivateFieldLooseBase(this, _lastUpdateTime)[_lastUpdateTime] = performance.now();\n        _classPrivateFieldLooseBase(this, _previousUploadedBytes)[_previousUploadedBytes] = 0;\n      }\n    });\n    this.id = this.opts.id || 'StatusBar';\n    this.title = 'StatusBar';\n    this.type = 'progressindicator';\n    this.defaultLocale = locale;\n    this.i18nInit();\n    this.render = this.render.bind(this);\n    this.install = this.install.bind(this);\n  }\n  render(state) {\n    const {\n      capabilities,\n      files,\n      allowNewUpload,\n      totalProgress,\n      error,\n      recoveredState\n    } = state;\n    const {\n      newFiles,\n      startedFiles,\n      completeFiles,\n      isUploadStarted,\n      isAllComplete,\n      isAllErrored,\n      isAllPaused,\n      isUploadInProgress,\n      isSomeGhost\n    } = this.uppy.getObjectOfFilesPerState();\n\n    // If some state was recovered, we want to show Upload button/counter\n    // for all the files, because in this case it’s not an Upload button,\n    // but “Confirm Restore Button”\n    const newFilesOrRecovered = recoveredState ? Object.values(files) : newFiles;\n    const resumableUploads = !!capabilities.resumableUploads;\n    const supportsUploadProgress = capabilities.uploadProgress !== false;\n    let totalSize = 0;\n    let totalUploadedSize = 0;\n    startedFiles.forEach(file => {\n      totalSize += file.progress.bytesTotal || 0;\n      totalUploadedSize += file.progress.bytesUploaded || 0;\n    });\n    const totalETA = _classPrivateFieldLooseBase(this, _computeSmoothETA)[_computeSmoothETA]({\n      uploaded: totalUploadedSize,\n      total: totalSize,\n      remaining: totalSize - totalUploadedSize\n    });\n    return StatusBarUI({\n      error,\n      uploadState: getUploadingState(error, isAllComplete, recoveredState, state.files || {}),\n      allowNewUpload,\n      totalProgress,\n      totalSize,\n      totalUploadedSize,\n      isAllComplete: false,\n      isAllPaused,\n      // @ts-expect-error TODO: remove this in 4.x branch\n      isAllErrored,\n      isUploadStarted,\n      isUploadInProgress,\n      isSomeGhost,\n      recoveredState,\n      complete: completeFiles.length,\n      newFiles: newFilesOrRecovered.length,\n      numUploads: startedFiles.length,\n      totalETA,\n      files,\n      i18n: this.i18n,\n      uppy: this.uppy,\n      startUpload: this.startUpload,\n      doneButtonHandler: this.opts.doneButtonHandler,\n      resumableUploads,\n      supportsUploadProgress,\n      showProgressDetails: this.opts.showProgressDetails,\n      hideUploadButton: this.opts.hideUploadButton,\n      hideRetryButton: this.opts.hideRetryButton,\n      hidePauseResumeButton: this.opts.hidePauseResumeButton,\n      hideCancelButton: this.opts.hideCancelButton,\n      hideAfterFinish: this.opts.hideAfterFinish,\n      // ts-expect-error TODO: remove this in 4.x branch\n      isTargetDOMEl: this.isTargetDOMEl\n    });\n  }\n  onMount() {\n    // Set the text direction if the page has not defined one.\n    const element = this.el;\n    const direction = getTextDirection(element);\n    if (!direction) {\n      element.dir = 'ltr';\n    }\n  }\n  install() {\n    const {\n      target\n    } = this.opts;\n    if (target) {\n      this.mount(target, this);\n    }\n    this.uppy.on('upload', _classPrivateFieldLooseBase(this, _onUploadStart)[_onUploadStart]);\n\n    // To cover the use case where the status bar is installed while the upload\n    // has started, we set `lastUpdateTime` right away.\n    _classPrivateFieldLooseBase(this, _lastUpdateTime)[_lastUpdateTime] = performance.now();\n    _classPrivateFieldLooseBase(this, _previousUploadedBytes)[_previousUploadedBytes] = this.uppy.getFiles().reduce((pv, file) => pv + file.progress.bytesUploaded, 0);\n  }\n  uninstall() {\n    this.unmount();\n    this.uppy.off('upload', _classPrivateFieldLooseBase(this, _onUploadStart)[_onUploadStart]);\n  }\n}\nfunction _computeSmoothETA2(totalBytes) {\n  var _classPrivateFieldLoo, _classPrivateFieldLoo2;\n  if (totalBytes.total === 0 || totalBytes.remaining === 0) {\n    return 0;\n  }\n\n  // When state is restored, lastUpdateTime is still nullish at this point.\n  (_classPrivateFieldLoo2 = (_classPrivateFieldLoo = _classPrivateFieldLooseBase(this, _lastUpdateTime))[_lastUpdateTime]) != null ? _classPrivateFieldLoo2 : _classPrivateFieldLoo[_lastUpdateTime] = performance.now();\n  const dt = performance.now() - _classPrivateFieldLooseBase(this, _lastUpdateTime)[_lastUpdateTime];\n  if (dt === 0) {\n    var _classPrivateFieldLoo3;\n    return Math.round(((_classPrivateFieldLoo3 = _classPrivateFieldLooseBase(this, _previousETA)[_previousETA]) != null ? _classPrivateFieldLoo3 : 0) / 100) / 10;\n  }\n  const uploadedBytesSinceLastTick = totalBytes.uploaded - _classPrivateFieldLooseBase(this, _previousUploadedBytes)[_previousUploadedBytes];\n  _classPrivateFieldLooseBase(this, _previousUploadedBytes)[_previousUploadedBytes] = totalBytes.uploaded;\n\n  // uploadedBytesSinceLastTick can be negative in some cases (packet loss?)\n  // in which case, we wait for next tick to update ETA.\n  if (uploadedBytesSinceLastTick <= 0) {\n    var _classPrivateFieldLoo4;\n    return Math.round(((_classPrivateFieldLoo4 = _classPrivateFieldLooseBase(this, _previousETA)[_previousETA]) != null ? _classPrivateFieldLoo4 : 0) / 100) / 10;\n  }\n  const currentSpeed = uploadedBytesSinceLastTick / dt;\n  const filteredSpeed = _classPrivateFieldLooseBase(this, _previousSpeed)[_previousSpeed] == null ? currentSpeed : emaFilter(currentSpeed, _classPrivateFieldLooseBase(this, _previousSpeed)[_previousSpeed], speedFilterHalfLife, dt);\n  _classPrivateFieldLooseBase(this, _previousSpeed)[_previousSpeed] = filteredSpeed;\n  const instantETA = totalBytes.remaining / filteredSpeed;\n  const updatedPreviousETA = Math.max(_classPrivateFieldLooseBase(this, _previousETA)[_previousETA] - dt, 0);\n  const filteredETA = _classPrivateFieldLooseBase(this, _previousETA)[_previousETA] == null ? instantETA : emaFilter(instantETA, updatedPreviousETA, ETAFilterHalfLife, dt);\n  _classPrivateFieldLooseBase(this, _previousETA)[_previousETA] = filteredETA;\n  _classPrivateFieldLooseBase(this, _lastUpdateTime)[_lastUpdateTime] = performance.now();\n  return Math.round(filteredETA / 100) / 10;\n}\nStatusBar.VERSION = packageJson.version;","map":{"version":3,"names":["_classPrivateFieldLooseBase","receiver","privateKey","Object","prototype","hasOwnProperty","call","TypeError","id","_classPrivateFieldLooseKey","name","UIPlugin","emaFilter","getTextDirection","statusBarStates","StatusBarUI","packageJson","locale","speedFilterHalfLife","ETAFilterHalfLife","getUploadingState","error","isAllComplete","recoveredState","files","STATE_ERROR","STATE_COMPLETE","STATE_WAITING","state","fileIDs","keys","i","length","progress","uploadStarted","uploadComplete","STATE_UPLOADING","preprocess","STATE_PREPROCESSING","postprocess","STATE_POSTPROCESSING","defaultOptions","target","hideUploadButton","hideRetryButton","hidePauseResumeButton","hideCancelButton","showProgressDetails","hideAfterFinish","doneButtonHandler","_lastUpdateTime","_previousUploadedBytes","_previousSpeed","_previousETA","_computeSmoothETA","_onUploadStart","StatusBar","constructor","uppy","opts","defineProperty","value","_computeSmoothETA2","writable","startUpload","upload","catch","getState","values","reduce","pv","_ref","bytesUploaded","emit","performance","now","title","type","defaultLocale","i18nInit","render","bind","install","capabilities","allowNewUpload","totalProgress","newFiles","startedFiles","completeFiles","isUploadStarted","isAllErrored","isAllPaused","isUploadInProgress","isSomeGhost","getObjectOfFilesPerState","newFilesOrRecovered","resumableUploads","supportsUploadProgress","uploadProgress","totalSize","totalUploadedSize","forEach","file","bytesTotal","totalETA","uploaded","total","remaining","uploadState","complete","numUploads","i18n","isTargetDOMEl","onMount","element","el","direction","dir","mount","on","getFiles","uninstall","unmount","off","totalBytes","_classPrivateFieldLoo","_classPrivateFieldLoo2","dt","_classPrivateFieldLoo3","Math","round","uploadedBytesSinceLastTick","_classPrivateFieldLoo4","currentSpeed","filteredSpeed","instantETA","updatedPreviousETA","max","filteredETA","VERSION","version"],"sources":["/home/nainar/Documents/reactProjects/userAuthentiCator/registeration-login/node_modules/@uppy/status-bar/lib/StatusBar.js"],"sourcesContent":["function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError(\"attempted to use private field on non-instance\"); } return receiver; }\nvar id = 0;\nfunction _classPrivateFieldLooseKey(name) { return \"__private_\" + id++ + \"_\" + name; }\nimport { UIPlugin } from '@uppy/core';\nimport emaFilter from '@uppy/utils/lib/emaFilter';\nimport getTextDirection from '@uppy/utils/lib/getTextDirection';\nimport statusBarStates from \"./StatusBarStates.js\";\nimport StatusBarUI from \"./StatusBarUI.js\";\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\nconst packageJson = {\n  \"version\": \"3.3.1\"\n};\nimport locale from \"./locale.js\";\nconst speedFilterHalfLife = 2000;\nconst ETAFilterHalfLife = 2000;\nfunction getUploadingState(error, isAllComplete, recoveredState, files) {\n  if (error) {\n    return statusBarStates.STATE_ERROR;\n  }\n  if (isAllComplete) {\n    return statusBarStates.STATE_COMPLETE;\n  }\n  if (recoveredState) {\n    return statusBarStates.STATE_WAITING;\n  }\n  let state = statusBarStates.STATE_WAITING;\n  const fileIDs = Object.keys(files);\n  for (let i = 0; i < fileIDs.length; i++) {\n    const {\n      progress\n    } = files[fileIDs[i]];\n    // If ANY files are being uploaded right now, show the uploading state.\n    if (progress.uploadStarted && !progress.uploadComplete) {\n      return statusBarStates.STATE_UPLOADING;\n    }\n    // If files are being preprocessed AND postprocessed at this time, we show the\n    // preprocess state. If any files are being uploaded we show uploading.\n    if (progress.preprocess) {\n      state = statusBarStates.STATE_PREPROCESSING;\n    }\n    // If NO files are being preprocessed or uploaded right now, but some files are\n    // being postprocessed, show the postprocess state.\n    if (progress.postprocess && state !== statusBarStates.STATE_PREPROCESSING) {\n      state = statusBarStates.STATE_POSTPROCESSING;\n    }\n  }\n  return state;\n}\n\n// set default options, must be kept in sync with @uppy/react/src/StatusBar.js\nconst defaultOptions = {\n  target: 'body',\n  hideUploadButton: false,\n  hideRetryButton: false,\n  hidePauseResumeButton: false,\n  hideCancelButton: false,\n  showProgressDetails: false,\n  hideAfterFinish: true,\n  doneButtonHandler: null\n};\n\n/**\n * StatusBar: renders a status bar with upload/pause/resume/cancel/retry buttons,\n * progress percentage and time remaining.\n */\nvar _lastUpdateTime = /*#__PURE__*/_classPrivateFieldLooseKey(\"lastUpdateTime\");\nvar _previousUploadedBytes = /*#__PURE__*/_classPrivateFieldLooseKey(\"previousUploadedBytes\");\nvar _previousSpeed = /*#__PURE__*/_classPrivateFieldLooseKey(\"previousSpeed\");\nvar _previousETA = /*#__PURE__*/_classPrivateFieldLooseKey(\"previousETA\");\nvar _computeSmoothETA = /*#__PURE__*/_classPrivateFieldLooseKey(\"computeSmoothETA\");\nvar _onUploadStart = /*#__PURE__*/_classPrivateFieldLooseKey(\"onUploadStart\");\nexport default class StatusBar extends UIPlugin {\n  constructor(uppy, opts) {\n    super(uppy, {\n      ...defaultOptions,\n      ...opts\n    });\n    Object.defineProperty(this, _computeSmoothETA, {\n      value: _computeSmoothETA2\n    });\n    Object.defineProperty(this, _lastUpdateTime, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _previousUploadedBytes, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _previousSpeed, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _previousETA, {\n      writable: true,\n      value: void 0\n    });\n    this.startUpload = () => {\n      return this.uppy.upload().catch(() => {\n        // Error logged in Core\n      });\n    };\n    Object.defineProperty(this, _onUploadStart, {\n      writable: true,\n      value: () => {\n        const {\n          recoveredState\n        } = this.uppy.getState();\n        _classPrivateFieldLooseBase(this, _previousSpeed)[_previousSpeed] = null;\n        _classPrivateFieldLooseBase(this, _previousETA)[_previousETA] = null;\n        if (recoveredState) {\n          _classPrivateFieldLooseBase(this, _previousUploadedBytes)[_previousUploadedBytes] = Object.values(recoveredState.files).reduce((pv, _ref) => {\n            let {\n              progress\n            } = _ref;\n            return pv + progress.bytesUploaded;\n          }, 0);\n\n          // We don't set `#lastUpdateTime` at this point because the upload won't\n          // actually resume until the user asks for it.\n\n          this.uppy.emit('restore-confirmed');\n          return;\n        }\n        _classPrivateFieldLooseBase(this, _lastUpdateTime)[_lastUpdateTime] = performance.now();\n        _classPrivateFieldLooseBase(this, _previousUploadedBytes)[_previousUploadedBytes] = 0;\n      }\n    });\n    this.id = this.opts.id || 'StatusBar';\n    this.title = 'StatusBar';\n    this.type = 'progressindicator';\n    this.defaultLocale = locale;\n    this.i18nInit();\n    this.render = this.render.bind(this);\n    this.install = this.install.bind(this);\n  }\n  render(state) {\n    const {\n      capabilities,\n      files,\n      allowNewUpload,\n      totalProgress,\n      error,\n      recoveredState\n    } = state;\n    const {\n      newFiles,\n      startedFiles,\n      completeFiles,\n      isUploadStarted,\n      isAllComplete,\n      isAllErrored,\n      isAllPaused,\n      isUploadInProgress,\n      isSomeGhost\n    } = this.uppy.getObjectOfFilesPerState();\n\n    // If some state was recovered, we want to show Upload button/counter\n    // for all the files, because in this case it’s not an Upload button,\n    // but “Confirm Restore Button”\n    const newFilesOrRecovered = recoveredState ? Object.values(files) : newFiles;\n    const resumableUploads = !!capabilities.resumableUploads;\n    const supportsUploadProgress = capabilities.uploadProgress !== false;\n    let totalSize = 0;\n    let totalUploadedSize = 0;\n    startedFiles.forEach(file => {\n      totalSize += file.progress.bytesTotal || 0;\n      totalUploadedSize += file.progress.bytesUploaded || 0;\n    });\n    const totalETA = _classPrivateFieldLooseBase(this, _computeSmoothETA)[_computeSmoothETA]({\n      uploaded: totalUploadedSize,\n      total: totalSize,\n      remaining: totalSize - totalUploadedSize\n    });\n    return StatusBarUI({\n      error,\n      uploadState: getUploadingState(error, isAllComplete, recoveredState, state.files || {}),\n      allowNewUpload,\n      totalProgress,\n      totalSize,\n      totalUploadedSize,\n      isAllComplete: false,\n      isAllPaused,\n      // @ts-expect-error TODO: remove this in 4.x branch\n      isAllErrored,\n      isUploadStarted,\n      isUploadInProgress,\n      isSomeGhost,\n      recoveredState,\n      complete: completeFiles.length,\n      newFiles: newFilesOrRecovered.length,\n      numUploads: startedFiles.length,\n      totalETA,\n      files,\n      i18n: this.i18n,\n      uppy: this.uppy,\n      startUpload: this.startUpload,\n      doneButtonHandler: this.opts.doneButtonHandler,\n      resumableUploads,\n      supportsUploadProgress,\n      showProgressDetails: this.opts.showProgressDetails,\n      hideUploadButton: this.opts.hideUploadButton,\n      hideRetryButton: this.opts.hideRetryButton,\n      hidePauseResumeButton: this.opts.hidePauseResumeButton,\n      hideCancelButton: this.opts.hideCancelButton,\n      hideAfterFinish: this.opts.hideAfterFinish,\n      // ts-expect-error TODO: remove this in 4.x branch\n      isTargetDOMEl: this.isTargetDOMEl\n    });\n  }\n  onMount() {\n    // Set the text direction if the page has not defined one.\n    const element = this.el;\n    const direction = getTextDirection(element);\n    if (!direction) {\n      element.dir = 'ltr';\n    }\n  }\n  install() {\n    const {\n      target\n    } = this.opts;\n    if (target) {\n      this.mount(target, this);\n    }\n    this.uppy.on('upload', _classPrivateFieldLooseBase(this, _onUploadStart)[_onUploadStart]);\n\n    // To cover the use case where the status bar is installed while the upload\n    // has started, we set `lastUpdateTime` right away.\n    _classPrivateFieldLooseBase(this, _lastUpdateTime)[_lastUpdateTime] = performance.now();\n    _classPrivateFieldLooseBase(this, _previousUploadedBytes)[_previousUploadedBytes] = this.uppy.getFiles().reduce((pv, file) => pv + file.progress.bytesUploaded, 0);\n  }\n  uninstall() {\n    this.unmount();\n    this.uppy.off('upload', _classPrivateFieldLooseBase(this, _onUploadStart)[_onUploadStart]);\n  }\n}\nfunction _computeSmoothETA2(totalBytes) {\n  var _classPrivateFieldLoo, _classPrivateFieldLoo2;\n  if (totalBytes.total === 0 || totalBytes.remaining === 0) {\n    return 0;\n  }\n\n  // When state is restored, lastUpdateTime is still nullish at this point.\n  (_classPrivateFieldLoo2 = (_classPrivateFieldLoo = _classPrivateFieldLooseBase(this, _lastUpdateTime))[_lastUpdateTime]) != null ? _classPrivateFieldLoo2 : _classPrivateFieldLoo[_lastUpdateTime] = performance.now();\n  const dt = performance.now() - _classPrivateFieldLooseBase(this, _lastUpdateTime)[_lastUpdateTime];\n  if (dt === 0) {\n    var _classPrivateFieldLoo3;\n    return Math.round(((_classPrivateFieldLoo3 = _classPrivateFieldLooseBase(this, _previousETA)[_previousETA]) != null ? _classPrivateFieldLoo3 : 0) / 100) / 10;\n  }\n  const uploadedBytesSinceLastTick = totalBytes.uploaded - _classPrivateFieldLooseBase(this, _previousUploadedBytes)[_previousUploadedBytes];\n  _classPrivateFieldLooseBase(this, _previousUploadedBytes)[_previousUploadedBytes] = totalBytes.uploaded;\n\n  // uploadedBytesSinceLastTick can be negative in some cases (packet loss?)\n  // in which case, we wait for next tick to update ETA.\n  if (uploadedBytesSinceLastTick <= 0) {\n    var _classPrivateFieldLoo4;\n    return Math.round(((_classPrivateFieldLoo4 = _classPrivateFieldLooseBase(this, _previousETA)[_previousETA]) != null ? _classPrivateFieldLoo4 : 0) / 100) / 10;\n  }\n  const currentSpeed = uploadedBytesSinceLastTick / dt;\n  const filteredSpeed = _classPrivateFieldLooseBase(this, _previousSpeed)[_previousSpeed] == null ? currentSpeed : emaFilter(currentSpeed, _classPrivateFieldLooseBase(this, _previousSpeed)[_previousSpeed], speedFilterHalfLife, dt);\n  _classPrivateFieldLooseBase(this, _previousSpeed)[_previousSpeed] = filteredSpeed;\n  const instantETA = totalBytes.remaining / filteredSpeed;\n  const updatedPreviousETA = Math.max(_classPrivateFieldLooseBase(this, _previousETA)[_previousETA] - dt, 0);\n  const filteredETA = _classPrivateFieldLooseBase(this, _previousETA)[_previousETA] == null ? instantETA : emaFilter(instantETA, updatedPreviousETA, ETAFilterHalfLife, dt);\n  _classPrivateFieldLooseBase(this, _previousETA)[_previousETA] = filteredETA;\n  _classPrivateFieldLooseBase(this, _lastUpdateTime)[_lastUpdateTime] = performance.now();\n  return Math.round(filteredETA / 100) / 10;\n}\nStatusBar.VERSION = packageJson.version;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}