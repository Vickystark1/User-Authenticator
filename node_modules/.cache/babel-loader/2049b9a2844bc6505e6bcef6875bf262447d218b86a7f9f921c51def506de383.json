{"ast":null,"code":"\"use strict\";\n\nmodule.exports = function prettierBytes(num) {\n  if (typeof num !== 'number' || Number.isNaN(num)) {\n    throw new TypeError(`Expected a number, got ${typeof num}`);\n  }\n  const neg = num < 0;\n  const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  if (neg) {\n    num = -num;\n  }\n  if (num < 1) {\n    return `${(neg ? '-' : '') + num} B`;\n  }\n  const exponent = Math.min(Math.floor(Math.log(num) / Math.log(1024)), units.length - 1);\n  num = Number(num / 1024 ** exponent);\n  const unit = units[exponent];\n  if (num >= 10 || num % 1 === 0) {\n    return `${(neg ? '-' : '') + num.toFixed(0)} ${unit}`;\n  }\n  return `${(neg ? '-' : '') + num.toFixed(1)} ${unit}`;\n};","map":{"version":3,"names":["module","exports","prettierBytes","num","Number","isNaN","TypeError","neg","units","exponent","Math","min","floor","log","length","unit","toFixed"],"sources":["/home/nainar/Documents/reactProjects/userAuthentiCator/registeration-login/node_modules/@transloadit/prettier-bytes/src/prettierBytes.ts"],"sourcesContent":["// Adapted from https://github.com/Flet/prettier-bytes/\n// Changing 1000 bytes to 1024, so we can keep uppercase KB vs kB\n// ISC License (c) Dan Flettre https://github.com/Flet/prettier-bytes/blob/master/LICENSE\nexport = function prettierBytes(num: number): string {\n  if (typeof num !== 'number' || Number.isNaN(num)) {\n    throw new TypeError(`Expected a number, got ${typeof num}`)\n  }\n\n  const neg = num < 0\n  const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n\n  if (neg) {\n    num = -num\n  }\n\n  if (num < 1) {\n    return `${(neg ? '-' : '') + num} B`\n  }\n\n  const exponent = Math.min(Math.floor(Math.log(num) / Math.log(1024)), units.length - 1)\n  num = Number(num / 1024 ** exponent)\n  const unit = units[exponent]\n\n  if (num >= 10 || num % 1 === 0) {\n    // Do not show decimals when the number is two-digit, or if the number has no\n    // decimal component.\n    return `${(neg ? '-' : '') + num.toFixed(0)} ${unit}`\n  }\n\n  return `${(neg ? '-' : '') + num.toFixed(1)} ${unit}`\n}\n"],"mappings":";;AAGAA,MAAA,CAAAC,OAAA,GAAS,SAASC,aAAaA,CAACC,GAAW;EACzC,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAIC,MAAM,CAACC,KAAK,CAACF,GAAG,CAAC,EAAE;IAChD,MAAM,IAAIG,SAAS,CAAC,0BAA0B,OAAOH,GAAG,EAAE,CAAC;EAC7D;EAEA,MAAMI,GAAG,GAAGJ,GAAG,GAAG,CAAC;EACnB,MAAMK,KAAK,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EAEnE,IAAID,GAAG,EAAE;IACPJ,GAAG,GAAG,CAACA,GAAG;EACZ;EAEA,IAAIA,GAAG,GAAG,CAAC,EAAE;IACX,OAAO,GAAG,CAACI,GAAG,GAAG,GAAG,GAAG,EAAE,IAAIJ,GAAG,IAAI;EACtC;EAEA,MAAMM,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,KAAK,CAACF,IAAI,CAACG,GAAG,CAACV,GAAG,CAAC,GAAGO,IAAI,CAACG,GAAG,CAAC,IAAI,CAAC,CAAC,EAAEL,KAAK,CAACM,MAAM,GAAG,CAAC,CAAC;EACvFX,GAAG,GAAGC,MAAM,CAACD,GAAG,GAAG,IAAI,IAAIM,QAAQ,CAAC;EACpC,MAAMM,IAAI,GAAGP,KAAK,CAACC,QAAQ,CAAC;EAE5B,IAAIN,GAAG,IAAI,EAAE,IAAIA,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE;IAG9B,OAAO,GAAG,CAACI,GAAG,GAAG,GAAG,GAAG,EAAE,IAAIJ,GAAG,CAACa,OAAO,CAAC,CAAC,CAAC,IAAID,IAAI,EAAE;EACvD;EAEA,OAAO,GAAG,CAACR,GAAG,GAAG,GAAG,GAAG,EAAE,IAAIJ,GAAG,CAACa,OAAO,CAAC,CAAC,CAAC,IAAID,IAAI,EAAE;AACvD,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}